/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectorySortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type FieldSelectorEnum =
  | 'SELECT';

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  /** Returns the first child node of type LocaleJson or null if there are no children of given type on this node */
  readonly childLocaleJson: Maybe<LocaleJson>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  /** Returns all children nodes filtered by type LocaleJson */
  readonly childrenLocaleJson: Maybe<ReadonlyArray<Maybe<LocaleJson>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
  readonly url: Maybe<Scalars['String']>;
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileConnection_minArgs = {
  field: FileFieldSelector;
};


type FileConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly blksize: InputMaybe<FieldSelectorEnum>;
  readonly blocks: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly childLocaleJson: InputMaybe<LocaleJsonFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly childrenLocaleJson: InputMaybe<LocaleJsonFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly publicURL: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly childLocaleJson: InputMaybe<LocaleJsonFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly childrenLocaleJson: InputMaybe<LocaleJsonFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_minArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly blksize: InputMaybe<SortOrderEnum>;
  readonly blocks: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly childLocaleJson: InputMaybe<LocaleJsonSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly childrenLocaleJson: InputMaybe<LocaleJsonSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly publicURL: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type GhostAuthor = Node & {
  readonly bio: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly count: GhostPostCount;
  readonly cover_image: Maybe<Scalars['String']>;
  readonly facebook: Maybe<Scalars['String']>;
  readonly fields: Maybe<GhostAuthorFields>;
  readonly ghostId: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly localCoverImage: Maybe<File>;
  readonly localProfileImage: Maybe<File>;
  readonly location: Maybe<Scalars['String']>;
  readonly meta_description: Maybe<Scalars['String']>;
  readonly meta_title: Maybe<Scalars['String']>;
  readonly name: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly postCount: Scalars['Int'];
  readonly profile_image: Maybe<Scalars['String']>;
  readonly slug: Scalars['String'];
  readonly twitter: Maybe<Scalars['String']>;
  readonly url: Scalars['String'];
  readonly website: Maybe<Scalars['String']>;
};

type GhostAuthorConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GhostAuthorEdge>;
  readonly group: ReadonlyArray<GhostAuthorGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GhostAuthor>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GhostAuthorConnection_distinctArgs = {
  field: GhostAuthorFieldSelector;
};


type GhostAuthorConnection_groupArgs = {
  field: GhostAuthorFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GhostAuthorConnection_maxArgs = {
  field: GhostAuthorFieldSelector;
};


type GhostAuthorConnection_minArgs = {
  field: GhostAuthorFieldSelector;
};


type GhostAuthorConnection_sumArgs = {
  field: GhostAuthorFieldSelector;
};

type GhostAuthorEdge = {
  readonly next: Maybe<GhostAuthor>;
  readonly node: GhostAuthor;
  readonly previous: Maybe<GhostAuthor>;
};

type GhostAuthorFieldSelector = {
  readonly bio: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly count: InputMaybe<GhostPostCountFieldSelector>;
  readonly cover_image: InputMaybe<FieldSelectorEnum>;
  readonly facebook: InputMaybe<FieldSelectorEnum>;
  readonly fields: InputMaybe<GhostAuthorFieldsFieldSelector>;
  readonly ghostId: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly localCoverImage: InputMaybe<FileFieldSelector>;
  readonly localProfileImage: InputMaybe<FileFieldSelector>;
  readonly location: InputMaybe<FieldSelectorEnum>;
  readonly meta_description: InputMaybe<FieldSelectorEnum>;
  readonly meta_title: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly postCount: InputMaybe<FieldSelectorEnum>;
  readonly profile_image: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly twitter: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly website: InputMaybe<FieldSelectorEnum>;
};

type GhostAuthorFields = {
  readonly localProfileImage: Maybe<Scalars['String']>;
};

type GhostAuthorFieldsFieldSelector = {
  readonly localProfileImage: InputMaybe<FieldSelectorEnum>;
};

type GhostAuthorFieldsFilterInput = {
  readonly localProfileImage: InputMaybe<StringQueryOperatorInput>;
};

type GhostAuthorFieldsSortInput = {
  readonly localProfileImage: InputMaybe<SortOrderEnum>;
};

type GhostAuthorFilterInput = {
  readonly bio: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly count: InputMaybe<GhostPostCountFilterInput>;
  readonly cover_image: InputMaybe<StringQueryOperatorInput>;
  readonly facebook: InputMaybe<StringQueryOperatorInput>;
  readonly fields: InputMaybe<GhostAuthorFieldsFilterInput>;
  readonly ghostId: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly localCoverImage: InputMaybe<FileFilterInput>;
  readonly localProfileImage: InputMaybe<FileFilterInput>;
  readonly location: InputMaybe<StringQueryOperatorInput>;
  readonly meta_description: InputMaybe<StringQueryOperatorInput>;
  readonly meta_title: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly postCount: InputMaybe<IntQueryOperatorInput>;
  readonly profile_image: InputMaybe<StringQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly twitter: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly website: InputMaybe<StringQueryOperatorInput>;
};

type GhostAuthorFilterListInput = {
  readonly elemMatch: InputMaybe<GhostAuthorFilterInput>;
};

type GhostAuthorGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GhostAuthorEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<GhostAuthorGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GhostAuthor>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GhostAuthorGroupConnection_distinctArgs = {
  field: GhostAuthorFieldSelector;
};


type GhostAuthorGroupConnection_groupArgs = {
  field: GhostAuthorFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GhostAuthorGroupConnection_maxArgs = {
  field: GhostAuthorFieldSelector;
};


type GhostAuthorGroupConnection_minArgs = {
  field: GhostAuthorFieldSelector;
};


type GhostAuthorGroupConnection_sumArgs = {
  field: GhostAuthorFieldSelector;
};

type GhostAuthorSortInput = {
  readonly bio: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly count: InputMaybe<GhostPostCountSortInput>;
  readonly cover_image: InputMaybe<SortOrderEnum>;
  readonly facebook: InputMaybe<SortOrderEnum>;
  readonly fields: InputMaybe<GhostAuthorFieldsSortInput>;
  readonly ghostId: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly localCoverImage: InputMaybe<FileSortInput>;
  readonly localProfileImage: InputMaybe<FileSortInput>;
  readonly location: InputMaybe<SortOrderEnum>;
  readonly meta_description: InputMaybe<SortOrderEnum>;
  readonly meta_title: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly postCount: InputMaybe<SortOrderEnum>;
  readonly profile_image: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly twitter: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly website: InputMaybe<SortOrderEnum>;
};

type GhostNavigation = {
  readonly label: Scalars['String'];
  readonly url: Scalars['String'];
};

type GhostNavigationFieldSelector = {
  readonly label: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type GhostNavigationFilterInput = {
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type GhostNavigationFilterListInput = {
  readonly elemMatch: InputMaybe<GhostNavigationFilterInput>;
};

type GhostNavigationSortInput = {
  readonly label: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type GhostPage = Node & {
  readonly authors: ReadonlyArray<Maybe<GhostAuthor>>;
  readonly canonical_url: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly codeinjection_foot: Maybe<Scalars['String']>;
  readonly codeinjection_head: Maybe<Scalars['String']>;
  readonly codeinjection_styles: Maybe<Scalars['String']>;
  readonly comment_id: Maybe<Scalars['String']>;
  readonly created_at: Scalars['Date'];
  readonly custom_excerpt: Maybe<Scalars['String']>;
  readonly custom_template: Maybe<Scalars['String']>;
  readonly email_subject: Maybe<Scalars['String']>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly feature_image: Maybe<Scalars['String']>;
  readonly feature_image_alt: Maybe<Scalars['String']>;
  readonly feature_image_caption: Maybe<Scalars['String']>;
  readonly featured: Scalars['Boolean'];
  readonly html: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly localFeatureImage: Maybe<File>;
  readonly meta_description: Maybe<Scalars['String']>;
  readonly meta_title: Maybe<Scalars['String']>;
  readonly og_description: Maybe<Scalars['String']>;
  readonly og_image: Maybe<Scalars['String']>;
  readonly og_title: Maybe<Scalars['String']>;
  readonly page: Maybe<Scalars['Boolean']>;
  readonly parent: Maybe<Node>;
  readonly plaintext: Maybe<Scalars['String']>;
  readonly primary_author: GhostAuthor;
  readonly primary_tag: Maybe<GhostTag>;
  readonly published_at: Maybe<Scalars['Date']>;
  readonly reading_time: Maybe<Scalars['Int']>;
  readonly send_email_when_published: Maybe<Scalars['Boolean']>;
  readonly slug: Scalars['String'];
  readonly tags: Maybe<ReadonlyArray<Maybe<GhostTag>>>;
  readonly title: Scalars['String'];
  readonly twitter_description: Maybe<Scalars['String']>;
  readonly twitter_image: Maybe<Scalars['String']>;
  readonly twitter_title: Maybe<Scalars['String']>;
  readonly updated_at: Maybe<Scalars['Date']>;
  readonly url: Scalars['String'];
  readonly uuid: Scalars['String'];
  readonly visibility: Scalars['String'];
};


type GhostPage_created_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type GhostPage_published_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type GhostPage_updated_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type GhostPageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GhostPageEdge>;
  readonly group: ReadonlyArray<GhostPageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GhostPage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GhostPageConnection_distinctArgs = {
  field: GhostPageFieldSelector;
};


type GhostPageConnection_groupArgs = {
  field: GhostPageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GhostPageConnection_maxArgs = {
  field: GhostPageFieldSelector;
};


type GhostPageConnection_minArgs = {
  field: GhostPageFieldSelector;
};


type GhostPageConnection_sumArgs = {
  field: GhostPageFieldSelector;
};

type GhostPageEdge = {
  readonly next: Maybe<GhostPage>;
  readonly node: GhostPage;
  readonly previous: Maybe<GhostPage>;
};

type GhostPageFieldSelector = {
  readonly authors: InputMaybe<GhostAuthorFieldSelector>;
  readonly canonical_url: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly codeinjection_foot: InputMaybe<FieldSelectorEnum>;
  readonly codeinjection_head: InputMaybe<FieldSelectorEnum>;
  readonly codeinjection_styles: InputMaybe<FieldSelectorEnum>;
  readonly comment_id: InputMaybe<FieldSelectorEnum>;
  readonly created_at: InputMaybe<FieldSelectorEnum>;
  readonly custom_excerpt: InputMaybe<FieldSelectorEnum>;
  readonly custom_template: InputMaybe<FieldSelectorEnum>;
  readonly email_subject: InputMaybe<FieldSelectorEnum>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly feature_image: InputMaybe<FieldSelectorEnum>;
  readonly feature_image_alt: InputMaybe<FieldSelectorEnum>;
  readonly feature_image_caption: InputMaybe<FieldSelectorEnum>;
  readonly featured: InputMaybe<FieldSelectorEnum>;
  readonly html: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly localFeatureImage: InputMaybe<FileFieldSelector>;
  readonly meta_description: InputMaybe<FieldSelectorEnum>;
  readonly meta_title: InputMaybe<FieldSelectorEnum>;
  readonly og_description: InputMaybe<FieldSelectorEnum>;
  readonly og_image: InputMaybe<FieldSelectorEnum>;
  readonly og_title: InputMaybe<FieldSelectorEnum>;
  readonly page: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly plaintext: InputMaybe<FieldSelectorEnum>;
  readonly primary_author: InputMaybe<GhostAuthorFieldSelector>;
  readonly primary_tag: InputMaybe<GhostTagFieldSelector>;
  readonly published_at: InputMaybe<FieldSelectorEnum>;
  readonly reading_time: InputMaybe<FieldSelectorEnum>;
  readonly send_email_when_published: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly tags: InputMaybe<GhostTagFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly twitter_description: InputMaybe<FieldSelectorEnum>;
  readonly twitter_image: InputMaybe<FieldSelectorEnum>;
  readonly twitter_title: InputMaybe<FieldSelectorEnum>;
  readonly updated_at: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly uuid: InputMaybe<FieldSelectorEnum>;
  readonly visibility: InputMaybe<FieldSelectorEnum>;
};

type GhostPageFilterInput = {
  readonly authors: InputMaybe<GhostAuthorFilterListInput>;
  readonly canonical_url: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly codeinjection_foot: InputMaybe<StringQueryOperatorInput>;
  readonly codeinjection_head: InputMaybe<StringQueryOperatorInput>;
  readonly codeinjection_styles: InputMaybe<StringQueryOperatorInput>;
  readonly comment_id: InputMaybe<StringQueryOperatorInput>;
  readonly created_at: InputMaybe<DateQueryOperatorInput>;
  readonly custom_excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly custom_template: InputMaybe<StringQueryOperatorInput>;
  readonly email_subject: InputMaybe<StringQueryOperatorInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly feature_image: InputMaybe<StringQueryOperatorInput>;
  readonly feature_image_alt: InputMaybe<StringQueryOperatorInput>;
  readonly feature_image_caption: InputMaybe<StringQueryOperatorInput>;
  readonly featured: InputMaybe<BooleanQueryOperatorInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly localFeatureImage: InputMaybe<FileFilterInput>;
  readonly meta_description: InputMaybe<StringQueryOperatorInput>;
  readonly meta_title: InputMaybe<StringQueryOperatorInput>;
  readonly og_description: InputMaybe<StringQueryOperatorInput>;
  readonly og_image: InputMaybe<StringQueryOperatorInput>;
  readonly og_title: InputMaybe<StringQueryOperatorInput>;
  readonly page: InputMaybe<BooleanQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly plaintext: InputMaybe<StringQueryOperatorInput>;
  readonly primary_author: InputMaybe<GhostAuthorFilterInput>;
  readonly primary_tag: InputMaybe<GhostTagFilterInput>;
  readonly published_at: InputMaybe<DateQueryOperatorInput>;
  readonly reading_time: InputMaybe<IntQueryOperatorInput>;
  readonly send_email_when_published: InputMaybe<BooleanQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly tags: InputMaybe<GhostTagFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_description: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_image: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_title: InputMaybe<StringQueryOperatorInput>;
  readonly updated_at: InputMaybe<DateQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly uuid: InputMaybe<StringQueryOperatorInput>;
  readonly visibility: InputMaybe<StringQueryOperatorInput>;
};

type GhostPageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GhostPageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<GhostPageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GhostPage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GhostPageGroupConnection_distinctArgs = {
  field: GhostPageFieldSelector;
};


type GhostPageGroupConnection_groupArgs = {
  field: GhostPageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GhostPageGroupConnection_maxArgs = {
  field: GhostPageFieldSelector;
};


type GhostPageGroupConnection_minArgs = {
  field: GhostPageFieldSelector;
};


type GhostPageGroupConnection_sumArgs = {
  field: GhostPageFieldSelector;
};

type GhostPageSortInput = {
  readonly authors: InputMaybe<GhostAuthorSortInput>;
  readonly canonical_url: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly codeinjection_foot: InputMaybe<SortOrderEnum>;
  readonly codeinjection_head: InputMaybe<SortOrderEnum>;
  readonly codeinjection_styles: InputMaybe<SortOrderEnum>;
  readonly comment_id: InputMaybe<SortOrderEnum>;
  readonly created_at: InputMaybe<SortOrderEnum>;
  readonly custom_excerpt: InputMaybe<SortOrderEnum>;
  readonly custom_template: InputMaybe<SortOrderEnum>;
  readonly email_subject: InputMaybe<SortOrderEnum>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly feature_image: InputMaybe<SortOrderEnum>;
  readonly feature_image_alt: InputMaybe<SortOrderEnum>;
  readonly feature_image_caption: InputMaybe<SortOrderEnum>;
  readonly featured: InputMaybe<SortOrderEnum>;
  readonly html: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly localFeatureImage: InputMaybe<FileSortInput>;
  readonly meta_description: InputMaybe<SortOrderEnum>;
  readonly meta_title: InputMaybe<SortOrderEnum>;
  readonly og_description: InputMaybe<SortOrderEnum>;
  readonly og_image: InputMaybe<SortOrderEnum>;
  readonly og_title: InputMaybe<SortOrderEnum>;
  readonly page: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly plaintext: InputMaybe<SortOrderEnum>;
  readonly primary_author: InputMaybe<GhostAuthorSortInput>;
  readonly primary_tag: InputMaybe<GhostTagSortInput>;
  readonly published_at: InputMaybe<SortOrderEnum>;
  readonly reading_time: InputMaybe<SortOrderEnum>;
  readonly send_email_when_published: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly tags: InputMaybe<GhostTagSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly twitter_description: InputMaybe<SortOrderEnum>;
  readonly twitter_image: InputMaybe<SortOrderEnum>;
  readonly twitter_title: InputMaybe<SortOrderEnum>;
  readonly updated_at: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly uuid: InputMaybe<SortOrderEnum>;
  readonly visibility: InputMaybe<SortOrderEnum>;
};

type GhostPost = Node & {
  readonly access: Maybe<Scalars['Boolean']>;
  readonly authors: ReadonlyArray<Maybe<GhostAuthor>>;
  readonly canonical_url: Maybe<Scalars['String']>;
  /** Returns the first child node of type HtmlRehype or null if there are no children of given type on this node */
  readonly childHtmlRehype: Maybe<HtmlRehype>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type HtmlRehype */
  readonly childrenHtmlRehype: Maybe<ReadonlyArray<Maybe<HtmlRehype>>>;
  readonly codeinjection_foot: Maybe<Scalars['String']>;
  readonly codeinjection_head: Maybe<Scalars['String']>;
  readonly codeinjection_styles: Maybe<Scalars['String']>;
  readonly comment_id: Maybe<Scalars['String']>;
  readonly comments: Maybe<Scalars['Boolean']>;
  readonly created_at: Scalars['Date'];
  readonly custom_excerpt: Maybe<Scalars['String']>;
  readonly custom_template: Maybe<Scalars['String']>;
  readonly email_subject: Maybe<Scalars['String']>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly feature_image: Maybe<Scalars['String']>;
  readonly feature_image_alt: Maybe<Scalars['String']>;
  readonly feature_image_caption: Maybe<Scalars['String']>;
  readonly featured: Scalars['Boolean'];
  readonly fields: Maybe<GhostPostFields>;
  readonly ghostId: Maybe<Scalars['String']>;
  readonly html: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly localFeatureImage: Maybe<File>;
  readonly meta_description: Maybe<Scalars['String']>;
  readonly meta_title: Maybe<Scalars['String']>;
  readonly og_description: Maybe<Scalars['String']>;
  readonly og_image: Maybe<Scalars['String']>;
  readonly og_title: Maybe<Scalars['String']>;
  readonly page: Maybe<Scalars['Boolean']>;
  readonly parent: Maybe<Node>;
  readonly plaintext: Maybe<Scalars['String']>;
  readonly primary_author: GhostAuthor;
  readonly primary_tag: Maybe<GhostTag>;
  readonly published_at: Maybe<Scalars['Date']>;
  readonly reading_time: Maybe<Scalars['Int']>;
  readonly send_email_when_published: Maybe<Scalars['Boolean']>;
  readonly slug: Scalars['String'];
  readonly tags: Maybe<ReadonlyArray<Maybe<GhostTag>>>;
  readonly title: Scalars['String'];
  readonly twitter_description: Maybe<Scalars['String']>;
  readonly twitter_image: Maybe<Scalars['String']>;
  readonly twitter_title: Maybe<Scalars['String']>;
  readonly updated_at: Maybe<Scalars['Date']>;
  readonly url: Scalars['String'];
  readonly uuid: Scalars['String'];
  readonly visibility: Scalars['String'];
};


type GhostPost_created_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type GhostPost_published_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type GhostPost_updated_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type GhostPostConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GhostPostEdge>;
  readonly group: ReadonlyArray<GhostPostGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GhostPost>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GhostPostConnection_distinctArgs = {
  field: GhostPostFieldSelector;
};


type GhostPostConnection_groupArgs = {
  field: GhostPostFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GhostPostConnection_maxArgs = {
  field: GhostPostFieldSelector;
};


type GhostPostConnection_minArgs = {
  field: GhostPostFieldSelector;
};


type GhostPostConnection_sumArgs = {
  field: GhostPostFieldSelector;
};

type GhostPostCount = {
  readonly posts: Maybe<Scalars['Int']>;
};

type GhostPostCountFieldSelector = {
  readonly posts: InputMaybe<FieldSelectorEnum>;
};

type GhostPostCountFilterInput = {
  readonly posts: InputMaybe<IntQueryOperatorInput>;
};

type GhostPostCountSortInput = {
  readonly posts: InputMaybe<SortOrderEnum>;
};

type GhostPostEdge = {
  readonly next: Maybe<GhostPost>;
  readonly node: GhostPost;
  readonly previous: Maybe<GhostPost>;
};

type GhostPostFieldSelector = {
  readonly access: InputMaybe<FieldSelectorEnum>;
  readonly authors: InputMaybe<GhostAuthorFieldSelector>;
  readonly canonical_url: InputMaybe<FieldSelectorEnum>;
  readonly childHtmlRehype: InputMaybe<HtmlRehypeFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenHtmlRehype: InputMaybe<HtmlRehypeFieldSelector>;
  readonly codeinjection_foot: InputMaybe<FieldSelectorEnum>;
  readonly codeinjection_head: InputMaybe<FieldSelectorEnum>;
  readonly codeinjection_styles: InputMaybe<FieldSelectorEnum>;
  readonly comment_id: InputMaybe<FieldSelectorEnum>;
  readonly comments: InputMaybe<FieldSelectorEnum>;
  readonly created_at: InputMaybe<FieldSelectorEnum>;
  readonly custom_excerpt: InputMaybe<FieldSelectorEnum>;
  readonly custom_template: InputMaybe<FieldSelectorEnum>;
  readonly email_subject: InputMaybe<FieldSelectorEnum>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly feature_image: InputMaybe<FieldSelectorEnum>;
  readonly feature_image_alt: InputMaybe<FieldSelectorEnum>;
  readonly feature_image_caption: InputMaybe<FieldSelectorEnum>;
  readonly featured: InputMaybe<FieldSelectorEnum>;
  readonly fields: InputMaybe<GhostPostFieldsFieldSelector>;
  readonly ghostId: InputMaybe<FieldSelectorEnum>;
  readonly html: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly localFeatureImage: InputMaybe<FileFieldSelector>;
  readonly meta_description: InputMaybe<FieldSelectorEnum>;
  readonly meta_title: InputMaybe<FieldSelectorEnum>;
  readonly og_description: InputMaybe<FieldSelectorEnum>;
  readonly og_image: InputMaybe<FieldSelectorEnum>;
  readonly og_title: InputMaybe<FieldSelectorEnum>;
  readonly page: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly plaintext: InputMaybe<FieldSelectorEnum>;
  readonly primary_author: InputMaybe<GhostAuthorFieldSelector>;
  readonly primary_tag: InputMaybe<GhostTagFieldSelector>;
  readonly published_at: InputMaybe<FieldSelectorEnum>;
  readonly reading_time: InputMaybe<FieldSelectorEnum>;
  readonly send_email_when_published: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly tags: InputMaybe<GhostTagFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly twitter_description: InputMaybe<FieldSelectorEnum>;
  readonly twitter_image: InputMaybe<FieldSelectorEnum>;
  readonly twitter_title: InputMaybe<FieldSelectorEnum>;
  readonly updated_at: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly uuid: InputMaybe<FieldSelectorEnum>;
  readonly visibility: InputMaybe<FieldSelectorEnum>;
};

type GhostPostFields = {
  readonly localFeatureImage: Maybe<Scalars['String']>;
};

type GhostPostFieldsFieldSelector = {
  readonly localFeatureImage: InputMaybe<FieldSelectorEnum>;
};

type GhostPostFieldsFilterInput = {
  readonly localFeatureImage: InputMaybe<StringQueryOperatorInput>;
};

type GhostPostFieldsSortInput = {
  readonly localFeatureImage: InputMaybe<SortOrderEnum>;
};

type GhostPostFilterInput = {
  readonly access: InputMaybe<BooleanQueryOperatorInput>;
  readonly authors: InputMaybe<GhostAuthorFilterListInput>;
  readonly canonical_url: InputMaybe<StringQueryOperatorInput>;
  readonly childHtmlRehype: InputMaybe<HtmlRehypeFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenHtmlRehype: InputMaybe<HtmlRehypeFilterListInput>;
  readonly codeinjection_foot: InputMaybe<StringQueryOperatorInput>;
  readonly codeinjection_head: InputMaybe<StringQueryOperatorInput>;
  readonly codeinjection_styles: InputMaybe<StringQueryOperatorInput>;
  readonly comment_id: InputMaybe<StringQueryOperatorInput>;
  readonly comments: InputMaybe<BooleanQueryOperatorInput>;
  readonly created_at: InputMaybe<DateQueryOperatorInput>;
  readonly custom_excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly custom_template: InputMaybe<StringQueryOperatorInput>;
  readonly email_subject: InputMaybe<StringQueryOperatorInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly feature_image: InputMaybe<StringQueryOperatorInput>;
  readonly feature_image_alt: InputMaybe<StringQueryOperatorInput>;
  readonly feature_image_caption: InputMaybe<StringQueryOperatorInput>;
  readonly featured: InputMaybe<BooleanQueryOperatorInput>;
  readonly fields: InputMaybe<GhostPostFieldsFilterInput>;
  readonly ghostId: InputMaybe<StringQueryOperatorInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly localFeatureImage: InputMaybe<FileFilterInput>;
  readonly meta_description: InputMaybe<StringQueryOperatorInput>;
  readonly meta_title: InputMaybe<StringQueryOperatorInput>;
  readonly og_description: InputMaybe<StringQueryOperatorInput>;
  readonly og_image: InputMaybe<StringQueryOperatorInput>;
  readonly og_title: InputMaybe<StringQueryOperatorInput>;
  readonly page: InputMaybe<BooleanQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly plaintext: InputMaybe<StringQueryOperatorInput>;
  readonly primary_author: InputMaybe<GhostAuthorFilterInput>;
  readonly primary_tag: InputMaybe<GhostTagFilterInput>;
  readonly published_at: InputMaybe<DateQueryOperatorInput>;
  readonly reading_time: InputMaybe<IntQueryOperatorInput>;
  readonly send_email_when_published: InputMaybe<BooleanQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly tags: InputMaybe<GhostTagFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_description: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_image: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_title: InputMaybe<StringQueryOperatorInput>;
  readonly updated_at: InputMaybe<DateQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly uuid: InputMaybe<StringQueryOperatorInput>;
  readonly visibility: InputMaybe<StringQueryOperatorInput>;
};

type GhostPostGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GhostPostEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<GhostPostGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GhostPost>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GhostPostGroupConnection_distinctArgs = {
  field: GhostPostFieldSelector;
};


type GhostPostGroupConnection_groupArgs = {
  field: GhostPostFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GhostPostGroupConnection_maxArgs = {
  field: GhostPostFieldSelector;
};


type GhostPostGroupConnection_minArgs = {
  field: GhostPostFieldSelector;
};


type GhostPostGroupConnection_sumArgs = {
  field: GhostPostFieldSelector;
};

type GhostPostSortInput = {
  readonly access: InputMaybe<SortOrderEnum>;
  readonly authors: InputMaybe<GhostAuthorSortInput>;
  readonly canonical_url: InputMaybe<SortOrderEnum>;
  readonly childHtmlRehype: InputMaybe<HtmlRehypeSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenHtmlRehype: InputMaybe<HtmlRehypeSortInput>;
  readonly codeinjection_foot: InputMaybe<SortOrderEnum>;
  readonly codeinjection_head: InputMaybe<SortOrderEnum>;
  readonly codeinjection_styles: InputMaybe<SortOrderEnum>;
  readonly comment_id: InputMaybe<SortOrderEnum>;
  readonly comments: InputMaybe<SortOrderEnum>;
  readonly created_at: InputMaybe<SortOrderEnum>;
  readonly custom_excerpt: InputMaybe<SortOrderEnum>;
  readonly custom_template: InputMaybe<SortOrderEnum>;
  readonly email_subject: InputMaybe<SortOrderEnum>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly feature_image: InputMaybe<SortOrderEnum>;
  readonly feature_image_alt: InputMaybe<SortOrderEnum>;
  readonly feature_image_caption: InputMaybe<SortOrderEnum>;
  readonly featured: InputMaybe<SortOrderEnum>;
  readonly fields: InputMaybe<GhostPostFieldsSortInput>;
  readonly ghostId: InputMaybe<SortOrderEnum>;
  readonly html: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly localFeatureImage: InputMaybe<FileSortInput>;
  readonly meta_description: InputMaybe<SortOrderEnum>;
  readonly meta_title: InputMaybe<SortOrderEnum>;
  readonly og_description: InputMaybe<SortOrderEnum>;
  readonly og_image: InputMaybe<SortOrderEnum>;
  readonly og_title: InputMaybe<SortOrderEnum>;
  readonly page: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly plaintext: InputMaybe<SortOrderEnum>;
  readonly primary_author: InputMaybe<GhostAuthorSortInput>;
  readonly primary_tag: InputMaybe<GhostTagSortInput>;
  readonly published_at: InputMaybe<SortOrderEnum>;
  readonly reading_time: InputMaybe<SortOrderEnum>;
  readonly send_email_when_published: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly tags: InputMaybe<GhostTagSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly twitter_description: InputMaybe<SortOrderEnum>;
  readonly twitter_image: InputMaybe<SortOrderEnum>;
  readonly twitter_title: InputMaybe<SortOrderEnum>;
  readonly updated_at: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly uuid: InputMaybe<SortOrderEnum>;
  readonly visibility: InputMaybe<SortOrderEnum>;
};

type GhostSettings = Node & {
  readonly accent_color: Maybe<Scalars['String']>;
  readonly active_timezone: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly codeinjection_foot: Maybe<Scalars['String']>;
  readonly codeinjection_head: Maybe<Scalars['String']>;
  readonly codeinjection_styles: Scalars['String'];
  readonly comments_enabled: Maybe<Scalars['String']>;
  readonly cover_image: Maybe<Scalars['String']>;
  readonly default_locale: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly facebook: Maybe<Scalars['String']>;
  readonly fields: Maybe<GhostSettingsFields>;
  readonly ghostId: Maybe<Scalars['Int']>;
  readonly icon: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly lang: Scalars['String'];
  readonly localCoverImage: Maybe<File>;
  readonly localIcon: Maybe<File>;
  readonly localLogo: Maybe<File>;
  readonly locale: Maybe<Scalars['String']>;
  readonly logo: Maybe<Scalars['String']>;
  readonly members_enabled: Maybe<Scalars['Boolean']>;
  readonly members_invite_only: Maybe<Scalars['Boolean']>;
  readonly members_support_address: Maybe<Scalars['String']>;
  readonly meta_description: Maybe<Scalars['String']>;
  readonly meta_title: Maybe<Scalars['String']>;
  readonly navigation: Maybe<ReadonlyArray<Maybe<GhostNavigation>>>;
  readonly og_description: Maybe<Scalars['String']>;
  readonly og_image: Maybe<Scalars['String']>;
  readonly og_title: Maybe<Scalars['String']>;
  readonly paid_members_enabled: Maybe<Scalars['Boolean']>;
  readonly parent: Maybe<Node>;
  readonly portal_button: Maybe<Scalars['Boolean']>;
  readonly portal_button_signup_text: Maybe<Scalars['String']>;
  readonly portal_button_style: Maybe<Scalars['String']>;
  readonly portal_name: Maybe<Scalars['Boolean']>;
  readonly portal_plans: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly secondary_navigation: Maybe<ReadonlyArray<Maybe<GhostNavigation>>>;
  readonly timezone: Scalars['String'];
  readonly title: Maybe<Scalars['String']>;
  readonly twitter: Maybe<Scalars['String']>;
  readonly twitter_description: Maybe<Scalars['String']>;
  readonly twitter_image: Maybe<Scalars['String']>;
  readonly twitter_title: Maybe<Scalars['String']>;
  readonly url: Scalars['String'];
  readonly version: Maybe<Scalars['String']>;
};

type GhostSettingsConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GhostSettingsEdge>;
  readonly group: ReadonlyArray<GhostSettingsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GhostSettings>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GhostSettingsConnection_distinctArgs = {
  field: GhostSettingsFieldSelector;
};


type GhostSettingsConnection_groupArgs = {
  field: GhostSettingsFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GhostSettingsConnection_maxArgs = {
  field: GhostSettingsFieldSelector;
};


type GhostSettingsConnection_minArgs = {
  field: GhostSettingsFieldSelector;
};


type GhostSettingsConnection_sumArgs = {
  field: GhostSettingsFieldSelector;
};

type GhostSettingsEdge = {
  readonly next: Maybe<GhostSettings>;
  readonly node: GhostSettings;
  readonly previous: Maybe<GhostSettings>;
};

type GhostSettingsFieldSelector = {
  readonly accent_color: InputMaybe<FieldSelectorEnum>;
  readonly active_timezone: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly codeinjection_foot: InputMaybe<FieldSelectorEnum>;
  readonly codeinjection_head: InputMaybe<FieldSelectorEnum>;
  readonly codeinjection_styles: InputMaybe<FieldSelectorEnum>;
  readonly comments_enabled: InputMaybe<FieldSelectorEnum>;
  readonly cover_image: InputMaybe<FieldSelectorEnum>;
  readonly default_locale: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly facebook: InputMaybe<FieldSelectorEnum>;
  readonly fields: InputMaybe<GhostSettingsFieldsFieldSelector>;
  readonly ghostId: InputMaybe<FieldSelectorEnum>;
  readonly icon: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly lang: InputMaybe<FieldSelectorEnum>;
  readonly localCoverImage: InputMaybe<FileFieldSelector>;
  readonly localIcon: InputMaybe<FileFieldSelector>;
  readonly localLogo: InputMaybe<FileFieldSelector>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly logo: InputMaybe<FieldSelectorEnum>;
  readonly members_enabled: InputMaybe<FieldSelectorEnum>;
  readonly members_invite_only: InputMaybe<FieldSelectorEnum>;
  readonly members_support_address: InputMaybe<FieldSelectorEnum>;
  readonly meta_description: InputMaybe<FieldSelectorEnum>;
  readonly meta_title: InputMaybe<FieldSelectorEnum>;
  readonly navigation: InputMaybe<GhostNavigationFieldSelector>;
  readonly og_description: InputMaybe<FieldSelectorEnum>;
  readonly og_image: InputMaybe<FieldSelectorEnum>;
  readonly og_title: InputMaybe<FieldSelectorEnum>;
  readonly paid_members_enabled: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly portal_button: InputMaybe<FieldSelectorEnum>;
  readonly portal_button_signup_text: InputMaybe<FieldSelectorEnum>;
  readonly portal_button_style: InputMaybe<FieldSelectorEnum>;
  readonly portal_name: InputMaybe<FieldSelectorEnum>;
  readonly portal_plans: InputMaybe<FieldSelectorEnum>;
  readonly secondary_navigation: InputMaybe<GhostNavigationFieldSelector>;
  readonly timezone: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly twitter: InputMaybe<FieldSelectorEnum>;
  readonly twitter_description: InputMaybe<FieldSelectorEnum>;
  readonly twitter_image: InputMaybe<FieldSelectorEnum>;
  readonly twitter_title: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type GhostSettingsFields = {
  readonly localCoverImage: Maybe<Scalars['String']>;
  readonly localIcon: Maybe<Scalars['String']>;
  readonly localLogo: Maybe<Scalars['String']>;
};

type GhostSettingsFieldsFieldSelector = {
  readonly localCoverImage: InputMaybe<FieldSelectorEnum>;
  readonly localIcon: InputMaybe<FieldSelectorEnum>;
  readonly localLogo: InputMaybe<FieldSelectorEnum>;
};

type GhostSettingsFieldsFilterInput = {
  readonly localCoverImage: InputMaybe<StringQueryOperatorInput>;
  readonly localIcon: InputMaybe<StringQueryOperatorInput>;
  readonly localLogo: InputMaybe<StringQueryOperatorInput>;
};

type GhostSettingsFieldsSortInput = {
  readonly localCoverImage: InputMaybe<SortOrderEnum>;
  readonly localIcon: InputMaybe<SortOrderEnum>;
  readonly localLogo: InputMaybe<SortOrderEnum>;
};

type GhostSettingsFilterInput = {
  readonly accent_color: InputMaybe<StringQueryOperatorInput>;
  readonly active_timezone: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly codeinjection_foot: InputMaybe<StringQueryOperatorInput>;
  readonly codeinjection_head: InputMaybe<StringQueryOperatorInput>;
  readonly codeinjection_styles: InputMaybe<StringQueryOperatorInput>;
  readonly comments_enabled: InputMaybe<StringQueryOperatorInput>;
  readonly cover_image: InputMaybe<StringQueryOperatorInput>;
  readonly default_locale: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly facebook: InputMaybe<StringQueryOperatorInput>;
  readonly fields: InputMaybe<GhostSettingsFieldsFilterInput>;
  readonly ghostId: InputMaybe<IntQueryOperatorInput>;
  readonly icon: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly lang: InputMaybe<StringQueryOperatorInput>;
  readonly localCoverImage: InputMaybe<FileFilterInput>;
  readonly localIcon: InputMaybe<FileFilterInput>;
  readonly localLogo: InputMaybe<FileFilterInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly logo: InputMaybe<StringQueryOperatorInput>;
  readonly members_enabled: InputMaybe<BooleanQueryOperatorInput>;
  readonly members_invite_only: InputMaybe<BooleanQueryOperatorInput>;
  readonly members_support_address: InputMaybe<StringQueryOperatorInput>;
  readonly meta_description: InputMaybe<StringQueryOperatorInput>;
  readonly meta_title: InputMaybe<StringQueryOperatorInput>;
  readonly navigation: InputMaybe<GhostNavigationFilterListInput>;
  readonly og_description: InputMaybe<StringQueryOperatorInput>;
  readonly og_image: InputMaybe<StringQueryOperatorInput>;
  readonly og_title: InputMaybe<StringQueryOperatorInput>;
  readonly paid_members_enabled: InputMaybe<BooleanQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly portal_button: InputMaybe<BooleanQueryOperatorInput>;
  readonly portal_button_signup_text: InputMaybe<StringQueryOperatorInput>;
  readonly portal_button_style: InputMaybe<StringQueryOperatorInput>;
  readonly portal_name: InputMaybe<BooleanQueryOperatorInput>;
  readonly portal_plans: InputMaybe<StringQueryOperatorInput>;
  readonly secondary_navigation: InputMaybe<GhostNavigationFilterListInput>;
  readonly timezone: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly twitter: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_description: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_image: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_title: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type GhostSettingsGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GhostSettingsEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<GhostSettingsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GhostSettings>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GhostSettingsGroupConnection_distinctArgs = {
  field: GhostSettingsFieldSelector;
};


type GhostSettingsGroupConnection_groupArgs = {
  field: GhostSettingsFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GhostSettingsGroupConnection_maxArgs = {
  field: GhostSettingsFieldSelector;
};


type GhostSettingsGroupConnection_minArgs = {
  field: GhostSettingsFieldSelector;
};


type GhostSettingsGroupConnection_sumArgs = {
  field: GhostSettingsFieldSelector;
};

type GhostSettingsSortInput = {
  readonly accent_color: InputMaybe<SortOrderEnum>;
  readonly active_timezone: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly codeinjection_foot: InputMaybe<SortOrderEnum>;
  readonly codeinjection_head: InputMaybe<SortOrderEnum>;
  readonly codeinjection_styles: InputMaybe<SortOrderEnum>;
  readonly comments_enabled: InputMaybe<SortOrderEnum>;
  readonly cover_image: InputMaybe<SortOrderEnum>;
  readonly default_locale: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly facebook: InputMaybe<SortOrderEnum>;
  readonly fields: InputMaybe<GhostSettingsFieldsSortInput>;
  readonly ghostId: InputMaybe<SortOrderEnum>;
  readonly icon: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly lang: InputMaybe<SortOrderEnum>;
  readonly localCoverImage: InputMaybe<FileSortInput>;
  readonly localIcon: InputMaybe<FileSortInput>;
  readonly localLogo: InputMaybe<FileSortInput>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly logo: InputMaybe<SortOrderEnum>;
  readonly members_enabled: InputMaybe<SortOrderEnum>;
  readonly members_invite_only: InputMaybe<SortOrderEnum>;
  readonly members_support_address: InputMaybe<SortOrderEnum>;
  readonly meta_description: InputMaybe<SortOrderEnum>;
  readonly meta_title: InputMaybe<SortOrderEnum>;
  readonly navigation: InputMaybe<GhostNavigationSortInput>;
  readonly og_description: InputMaybe<SortOrderEnum>;
  readonly og_image: InputMaybe<SortOrderEnum>;
  readonly og_title: InputMaybe<SortOrderEnum>;
  readonly paid_members_enabled: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly portal_button: InputMaybe<SortOrderEnum>;
  readonly portal_button_signup_text: InputMaybe<SortOrderEnum>;
  readonly portal_button_style: InputMaybe<SortOrderEnum>;
  readonly portal_name: InputMaybe<SortOrderEnum>;
  readonly portal_plans: InputMaybe<SortOrderEnum>;
  readonly secondary_navigation: InputMaybe<GhostNavigationSortInput>;
  readonly timezone: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly twitter: InputMaybe<SortOrderEnum>;
  readonly twitter_description: InputMaybe<SortOrderEnum>;
  readonly twitter_image: InputMaybe<SortOrderEnum>;
  readonly twitter_title: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type GhostTag = Node & {
  readonly accent_color: Maybe<Scalars['String']>;
  readonly canonical_url: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly codeinjection_foot: Maybe<Scalars['String']>;
  readonly codeinjection_head: Maybe<Scalars['String']>;
  readonly count: Maybe<GhostPostCount>;
  readonly description: Maybe<Scalars['String']>;
  readonly feature_image: Maybe<Scalars['String']>;
  readonly ghostId: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly localFeatureImage: Maybe<File>;
  readonly meta_description: Maybe<Scalars['String']>;
  readonly meta_title: Maybe<Scalars['String']>;
  readonly name: Scalars['String'];
  readonly og_description: Maybe<Scalars['String']>;
  readonly og_image: Maybe<Scalars['String']>;
  readonly og_title: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly postCount: Maybe<Scalars['Int']>;
  readonly slug: Scalars['String'];
  readonly twitter_description: Maybe<Scalars['String']>;
  readonly twitter_image: Maybe<Scalars['String']>;
  readonly twitter_title: Maybe<Scalars['String']>;
  readonly url: Scalars['String'];
  readonly visibility: Scalars['String'];
};

type GhostTagConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GhostTagEdge>;
  readonly group: ReadonlyArray<GhostTagGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GhostTag>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GhostTagConnection_distinctArgs = {
  field: GhostTagFieldSelector;
};


type GhostTagConnection_groupArgs = {
  field: GhostTagFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GhostTagConnection_maxArgs = {
  field: GhostTagFieldSelector;
};


type GhostTagConnection_minArgs = {
  field: GhostTagFieldSelector;
};


type GhostTagConnection_sumArgs = {
  field: GhostTagFieldSelector;
};

type GhostTagEdge = {
  readonly next: Maybe<GhostTag>;
  readonly node: GhostTag;
  readonly previous: Maybe<GhostTag>;
};

type GhostTagFieldSelector = {
  readonly accent_color: InputMaybe<FieldSelectorEnum>;
  readonly canonical_url: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly codeinjection_foot: InputMaybe<FieldSelectorEnum>;
  readonly codeinjection_head: InputMaybe<FieldSelectorEnum>;
  readonly count: InputMaybe<GhostPostCountFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly feature_image: InputMaybe<FieldSelectorEnum>;
  readonly ghostId: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly localFeatureImage: InputMaybe<FileFieldSelector>;
  readonly meta_description: InputMaybe<FieldSelectorEnum>;
  readonly meta_title: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly og_description: InputMaybe<FieldSelectorEnum>;
  readonly og_image: InputMaybe<FieldSelectorEnum>;
  readonly og_title: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly postCount: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly twitter_description: InputMaybe<FieldSelectorEnum>;
  readonly twitter_image: InputMaybe<FieldSelectorEnum>;
  readonly twitter_title: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly visibility: InputMaybe<FieldSelectorEnum>;
};

type GhostTagFilterInput = {
  readonly accent_color: InputMaybe<StringQueryOperatorInput>;
  readonly canonical_url: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly codeinjection_foot: InputMaybe<StringQueryOperatorInput>;
  readonly codeinjection_head: InputMaybe<StringQueryOperatorInput>;
  readonly count: InputMaybe<GhostPostCountFilterInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly feature_image: InputMaybe<StringQueryOperatorInput>;
  readonly ghostId: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly localFeatureImage: InputMaybe<FileFilterInput>;
  readonly meta_description: InputMaybe<StringQueryOperatorInput>;
  readonly meta_title: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly og_description: InputMaybe<StringQueryOperatorInput>;
  readonly og_image: InputMaybe<StringQueryOperatorInput>;
  readonly og_title: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly postCount: InputMaybe<IntQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_description: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_image: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_title: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly visibility: InputMaybe<StringQueryOperatorInput>;
};

type GhostTagFilterListInput = {
  readonly elemMatch: InputMaybe<GhostTagFilterInput>;
};

type GhostTagGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GhostTagEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<GhostTagGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GhostTag>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GhostTagGroupConnection_distinctArgs = {
  field: GhostTagFieldSelector;
};


type GhostTagGroupConnection_groupArgs = {
  field: GhostTagFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GhostTagGroupConnection_maxArgs = {
  field: GhostTagFieldSelector;
};


type GhostTagGroupConnection_minArgs = {
  field: GhostTagFieldSelector;
};


type GhostTagGroupConnection_sumArgs = {
  field: GhostTagFieldSelector;
};

type GhostTagSortInput = {
  readonly accent_color: InputMaybe<SortOrderEnum>;
  readonly canonical_url: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly codeinjection_foot: InputMaybe<SortOrderEnum>;
  readonly codeinjection_head: InputMaybe<SortOrderEnum>;
  readonly count: InputMaybe<GhostPostCountSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly feature_image: InputMaybe<SortOrderEnum>;
  readonly ghostId: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly localFeatureImage: InputMaybe<FileSortInput>;
  readonly meta_description: InputMaybe<SortOrderEnum>;
  readonly meta_title: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly og_description: InputMaybe<SortOrderEnum>;
  readonly og_image: InputMaybe<SortOrderEnum>;
  readonly og_title: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly postCount: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly twitter_description: InputMaybe<SortOrderEnum>;
  readonly twitter_image: InputMaybe<SortOrderEnum>;
  readonly twitter_title: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly visibility: InputMaybe<SortOrderEnum>;
};

type GhostTiers = Node & {
  readonly active: Scalars['Boolean'];
  readonly children: ReadonlyArray<Node>;
  readonly created_at: Maybe<Scalars['Date']>;
  readonly currency: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly ghostId: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly monthly_price: Maybe<Scalars['Int']>;
  readonly name: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly slug: Scalars['String'];
  readonly stripe_prices: Maybe<Scalars['String']>;
  readonly trial_days: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
  readonly updated_at: Maybe<Scalars['Date']>;
  readonly visibility: Scalars['String'];
  readonly welcome_page_url: Maybe<Scalars['String']>;
  readonly yearly_price: Maybe<Scalars['Int']>;
};


type GhostTiers_created_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type GhostTiers_updated_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type GhostTiersConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GhostTiersEdge>;
  readonly group: ReadonlyArray<GhostTiersGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GhostTiers>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GhostTiersConnection_distinctArgs = {
  field: GhostTiersFieldSelector;
};


type GhostTiersConnection_groupArgs = {
  field: GhostTiersFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GhostTiersConnection_maxArgs = {
  field: GhostTiersFieldSelector;
};


type GhostTiersConnection_minArgs = {
  field: GhostTiersFieldSelector;
};


type GhostTiersConnection_sumArgs = {
  field: GhostTiersFieldSelector;
};

type GhostTiersEdge = {
  readonly next: Maybe<GhostTiers>;
  readonly node: GhostTiers;
  readonly previous: Maybe<GhostTiers>;
};

type GhostTiersFieldSelector = {
  readonly active: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly created_at: InputMaybe<FieldSelectorEnum>;
  readonly currency: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly ghostId: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly monthly_price: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly stripe_prices: InputMaybe<FieldSelectorEnum>;
  readonly trial_days: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly updated_at: InputMaybe<FieldSelectorEnum>;
  readonly visibility: InputMaybe<FieldSelectorEnum>;
  readonly welcome_page_url: InputMaybe<FieldSelectorEnum>;
  readonly yearly_price: InputMaybe<FieldSelectorEnum>;
};

type GhostTiersFilterInput = {
  readonly active: InputMaybe<BooleanQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly created_at: InputMaybe<DateQueryOperatorInput>;
  readonly currency: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly ghostId: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly monthly_price: InputMaybe<IntQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly stripe_prices: InputMaybe<StringQueryOperatorInput>;
  readonly trial_days: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly updated_at: InputMaybe<DateQueryOperatorInput>;
  readonly visibility: InputMaybe<StringQueryOperatorInput>;
  readonly welcome_page_url: InputMaybe<StringQueryOperatorInput>;
  readonly yearly_price: InputMaybe<IntQueryOperatorInput>;
};

type GhostTiersGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GhostTiersEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<GhostTiersGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GhostTiers>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GhostTiersGroupConnection_distinctArgs = {
  field: GhostTiersFieldSelector;
};


type GhostTiersGroupConnection_groupArgs = {
  field: GhostTiersFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GhostTiersGroupConnection_maxArgs = {
  field: GhostTiersFieldSelector;
};


type GhostTiersGroupConnection_minArgs = {
  field: GhostTiersFieldSelector;
};


type GhostTiersGroupConnection_sumArgs = {
  field: GhostTiersFieldSelector;
};

type GhostTiersSortInput = {
  readonly active: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly created_at: InputMaybe<SortOrderEnum>;
  readonly currency: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly ghostId: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly monthly_price: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly stripe_prices: InputMaybe<SortOrderEnum>;
  readonly trial_days: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly updated_at: InputMaybe<SortOrderEnum>;
  readonly visibility: InputMaybe<SortOrderEnum>;
  readonly welcome_page_url: InputMaybe<SortOrderEnum>;
  readonly yearly_price: InputMaybe<SortOrderEnum>;
};

type HtmlRehype = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly context: Maybe<HtmlRehypeContext>;
  readonly html: Maybe<Scalars['String']>;
  readonly htmlAst: Maybe<Scalars['JSON']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly tableOfContents: Maybe<Scalars['JSON']>;
};

type HtmlRehypeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HtmlRehypeEdge>;
  readonly group: ReadonlyArray<HtmlRehypeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HtmlRehype>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HtmlRehypeConnection_distinctArgs = {
  field: HtmlRehypeFieldSelector;
};


type HtmlRehypeConnection_groupArgs = {
  field: HtmlRehypeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HtmlRehypeConnection_maxArgs = {
  field: HtmlRehypeFieldSelector;
};


type HtmlRehypeConnection_minArgs = {
  field: HtmlRehypeFieldSelector;
};


type HtmlRehypeConnection_sumArgs = {
  field: HtmlRehypeFieldSelector;
};

type HtmlRehypeContext = {
  readonly feature_image: Maybe<Scalars['String']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type HtmlRehypeContextFieldSelector = {
  readonly feature_image: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type HtmlRehypeContextFilterInput = {
  readonly feature_image: InputMaybe<StringQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type HtmlRehypeContextSortInput = {
  readonly feature_image: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type HtmlRehypeEdge = {
  readonly next: Maybe<HtmlRehype>;
  readonly node: HtmlRehype;
  readonly previous: Maybe<HtmlRehype>;
};

type HtmlRehypeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly context: InputMaybe<HtmlRehypeContextFieldSelector>;
  readonly html: InputMaybe<FieldSelectorEnum>;
  readonly htmlAst: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly tableOfContents: InputMaybe<FieldSelectorEnum>;
};

type HtmlRehypeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly context: InputMaybe<HtmlRehypeContextFilterInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly htmlAst: InputMaybe<JSONQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly tableOfContents: InputMaybe<JSONQueryOperatorInput>;
};

type HtmlRehypeFilterListInput = {
  readonly elemMatch: InputMaybe<HtmlRehypeFilterInput>;
};

type HtmlRehypeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HtmlRehypeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<HtmlRehypeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HtmlRehype>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HtmlRehypeGroupConnection_distinctArgs = {
  field: HtmlRehypeFieldSelector;
};


type HtmlRehypeGroupConnection_groupArgs = {
  field: HtmlRehypeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HtmlRehypeGroupConnection_maxArgs = {
  field: HtmlRehypeFieldSelector;
};


type HtmlRehypeGroupConnection_minArgs = {
  field: HtmlRehypeFieldSelector;
};


type HtmlRehypeGroupConnection_sumArgs = {
  field: HtmlRehypeFieldSelector;
};

type HtmlRehypeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly context: InputMaybe<HtmlRehypeContextSortInput>;
  readonly html: InputMaybe<SortOrderEnum>;
  readonly htmlAst: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly tableOfContents: InputMaybe<SortOrderEnum>;
};

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fixed: InputMaybe<ImageSharpFixedFieldSelector>;
  readonly fluid: InputMaybe<ImageSharpFluidFieldSelector>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly original: InputMaybe<ImageSharpOriginalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly resize: InputMaybe<ImageSharpResizeFieldSelector>;
};

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFixedSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly originalImg: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly presentationHeight: InputMaybe<FieldSelectorEnum>;
  readonly presentationWidth: InputMaybe<FieldSelectorEnum>;
  readonly sizes: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpFluidSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly originalImg: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly presentationHeight: InputMaybe<SortOrderEnum>;
  readonly presentationWidth: InputMaybe<SortOrderEnum>;
  readonly sizes: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpOriginalSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpResizeSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly fixed: InputMaybe<ImageSharpFixedSortInput>;
  readonly fluid: InputMaybe<ImageSharpFluidSortInput>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly original: InputMaybe<ImageSharpOriginalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly resize: InputMaybe<ImageSharpResizeSortInput>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly contentDigest: InputMaybe<FieldSelectorEnum>;
  readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
  readonly ignoreType: InputMaybe<FieldSelectorEnum>;
  readonly mediaType: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type InternalSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly contentDigest: InputMaybe<SortOrderEnum>;
  readonly contentFilePath: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fieldOwners: InputMaybe<SortOrderEnum>;
  readonly ignoreType: InputMaybe<SortOrderEnum>;
  readonly mediaType: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

type LocaleJson = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<LocaleJsonContent>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly language: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
};

type LocaleJsonConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<LocaleJsonEdge>;
  readonly group: ReadonlyArray<LocaleJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<LocaleJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type LocaleJsonConnection_distinctArgs = {
  field: LocaleJsonFieldSelector;
};


type LocaleJsonConnection_groupArgs = {
  field: LocaleJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type LocaleJsonConnection_maxArgs = {
  field: LocaleJsonFieldSelector;
};


type LocaleJsonConnection_minArgs = {
  field: LocaleJsonFieldSelector;
};


type LocaleJsonConnection_sumArgs = {
  field: LocaleJsonFieldSelector;
};

type LocaleJsonContent = {
  readonly ADDRESS: Maybe<Scalars['String']>;
  readonly A_collection_of_1_post: Maybe<Scalars['String']>;
  readonly A_collection_of___posts: Maybe<Scalars['String']>;
  readonly A_collection_of_posts: Maybe<Scalars['String']>;
  readonly About_Us: Maybe<Scalars['String']>;
  readonly Account: Maybe<Scalars['String']>;
  readonly All: Maybe<Scalars['String']>;
  readonly Already_have_an_account_: Maybe<Scalars['String']>;
  readonly Back: Maybe<Scalars['String']>;
  readonly Billing_info_update_failed_: Maybe<Scalars['String']>;
  readonly By: Maybe<Scalars['String']>;
  readonly Close_search: Maybe<Scalars['String']>;
  readonly Comments: Maybe<Scalars['String']>;
  readonly Continue: Maybe<Scalars['String']>;
  readonly Discover_more_of_what_matters_to_you: Maybe<Scalars['String']>;
  readonly EMAIL: Maybe<Scalars['String']>;
  readonly Email_Address: Maybe<Scalars['String']>;
  readonly Featured_Articles: Maybe<Scalars['String']>;
  readonly Follow: Maybe<Scalars['String']>;
  readonly GO_TOP: Maybe<Scalars['String']>;
  readonly Get_Started: Maybe<Scalars['String']>;
  readonly Get_the_best_viral_stories_straight_into_your_inbox_: Maybe<Scalars['String']>;
  readonly Get_the_latest_posts_delivered_right_to_your_inbox: Maybe<Scalars['String']>;
  readonly Go_to: Maybe<Scalars['String']>;
  readonly Go_to_article: Maybe<Scalars['String']>;
  readonly Go_to_the_profile_of: Maybe<Scalars['String']>;
  readonly Great__Next__complete_checkout_for_full_access_to: Maybe<Scalars['String']>;
  readonly Hey_there_: Maybe<Scalars['String']>;
  readonly Hi_I_m: Maybe<Scalars['String']>;
  readonly Home: Maybe<Scalars['String']>;
  readonly Latest_Articles: Maybe<Scalars['String']>;
  readonly Latest_Posts: Maybe<Scalars['String']>;
  readonly Listen: Maybe<Scalars['String']>;
  readonly Log_in: Maybe<Scalars['String']>;
  readonly Log_out: Maybe<Scalars['String']>;
  readonly Message: Maybe<Scalars['String']>;
  readonly More: Maybe<Scalars['String']>;
  readonly Name: Maybe<Scalars['String']>;
  readonly Navigate_up_down: Maybe<Scalars['String']>;
  readonly Newer_Posts: Maybe<Scalars['String']>;
  readonly Next_article: Maybe<Scalars['String']>;
  readonly No_Stories: Maybe<Scalars['String']>;
  readonly No_posts: Maybe<Scalars['String']>;
  readonly No_results_found: Maybe<Scalars['String']>;
  readonly Older_Posts: Maybe<Scalars['String']>;
  readonly PHONE: Maybe<Scalars['String']>;
  readonly Page: Maybe<Scalars['String']>;
  readonly Please_enter_a_valid_email_address_: Maybe<Scalars['String']>;
  readonly Posts_Tagged: Maybe<Scalars['String']>;
  readonly Prev_article: Maybe<Scalars['String']>;
  readonly Previous_article: Maybe<Scalars['String']>;
  readonly Read_More: Maybe<Scalars['String']>;
  readonly Read__a_href___url___more_posts__a__by_this_author: Maybe<Scalars['String']>;
  readonly Read_more: Maybe<Scalars['String']>;
  readonly Read_post: Maybe<Scalars['String']>;
  readonly Read_the_rest_of_this_story_with_a_free_account_: Maybe<Scalars['String']>;
  readonly Related_Articles: Maybe<Scalars['String']>;
  readonly Related_Posts: Maybe<Scalars['String']>;
  readonly Related__span_class__text_primary__Articles__span_: Maybe<Scalars['String']>;
  readonly Related__span_class__text_success__Articles__span_: Maybe<Scalars['String']>;
  readonly Search: Maybe<Scalars['String']>;
  readonly Search_new_term: Maybe<Scalars['String']>;
  readonly See_all___posts: Maybe<Scalars['String']>;
  readonly Send: Maybe<Scalars['String']>;
  readonly Share: Maybe<Scalars['String']>;
  readonly Share_on: Maybe<Scalars['String']>;
  readonly Share_this: Maybe<Scalars['String']>;
  readonly Share_this_article: Maybe<Scalars['String']>;
  readonly Sign_in: Maybe<Scalars['String']>;
  readonly Sign_up: Maybe<Scalars['String']>;
  readonly Sign_up_for_my_newsletter_: Maybe<Scalars['String']>;
  readonly Signed_in_as: Maybe<Scalars['String']>;
  readonly Stay_up_to_date__Get_all_the_latest___greatest_posts_delivered_straight_to_your_inbox: Maybe<Scalars['String']>;
  readonly Stories: Maybe<Scalars['String']>;
  readonly Subscribe: Maybe<Scalars['String']>;
  readonly Subscribe_now: Maybe<Scalars['String']>;
  readonly Subscribe_to: Maybe<Scalars['String']>;
  readonly Subscribed_: Maybe<Scalars['String']>;
  readonly Success__Your_account_is_fully_activated__you_now_have_access_to_all_content_: Maybe<Scalars['String']>;
  readonly Success__Your_billing_info_is_updated_: Maybe<Scalars['String']>;
  readonly Tag_Cloud: Maybe<Scalars['String']>;
  readonly Tags: Maybe<Scalars['String']>;
  readonly The_full_archive: Maybe<Scalars['String']>;
  readonly There_are__total__posts_in_total: Maybe<Scalars['String']>;
  readonly This_post_is_for_paying_subscribers_only: Maybe<Scalars['String']>;
  readonly Total_number_of_posts: Maybe<Scalars['String']>;
  readonly Unable_to_sign_you_in__Please_try_again_: Maybe<Scalars['String']>;
  readonly Unfortunately__this_page_doesn_t_exist: Maybe<Scalars['String']>;
  readonly Updated: Maybe<Scalars['String']>;
  readonly Upgrade: Maybe<Scalars['String']>;
  readonly View_Project: Maybe<Scalars['String']>;
  readonly W_tej_chwili_nie_masz_dost_pu_do_tego_wpisu_na__strong__siteTitle___strong___ale_je_li_podniesiesz_wersj__swojego_konta_to_b_dziesz_m_g__zobaczy__jego_ca_o____jak_r_wnie__wszystkie_inne_posty_w_tym_archiwum__Subskrypcja_zajmuje_tylko_kilka_sekund_i_od_razu_masz_dost_p_: Maybe<Scalars['String']>;
  readonly Want_more_stuff_like_this_: Maybe<Scalars['String']>;
  readonly Welcome_back__You_ve_successfully_signed_in_: Maybe<Scalars['String']>;
  readonly You_don_t_have_access_to_this_post_on__strong__siteTitle___strong__at_the_moment__but_if_you_upgrade_your_account_you_ll_be_able_to_see_the_whole_thing__as_well_as_all_the_other_posts_in_the_archive__Subscribing_only_takes_a_few_seconds_and_will_give_you_immediate_access_: Maybe<Scalars['String']>;
  readonly You_ve_successfully_subscribed: Maybe<Scalars['String']>;
  readonly You_ve_successfully_subscribed_to: Maybe<Scalars['String']>;
  readonly Your_email_address: Maybe<Scalars['String']>;
  readonly _1_Story: Maybe<Scalars['String']>;
  readonly _1_min_read: Maybe<Scalars['String']>;
  readonly _1_post: Maybe<Scalars['String']>;
  readonly _2_posts: Maybe<Scalars['String']>;
  readonly _strong_Great___strong__Check_your_inbox_and_click_the_link_to_confirm_your_subscription: Maybe<Scalars['String']>;
  readonly _x1xminxread: Maybe<Scalars['String']>;
  readonly _xStories: Maybe<Scalars['String']>;
  readonly _xminxread: Maybe<Scalars['String']>;
  readonly _xposts: Maybe<Scalars['String']>;
  readonly featured_story: Maybe<Scalars['String']>;
  readonly in: Maybe<Scalars['String']>;
  readonly of: Maybe<Scalars['String']>;
  readonly shares: Maybe<Scalars['String']>;
  readonly with_the_email_address: Maybe<Scalars['String']>;
  readonly youremail_example_com: Maybe<Scalars['String']>;
};

type LocaleJsonContentFieldSelector = {
  readonly ADDRESS: InputMaybe<FieldSelectorEnum>;
  readonly A_collection_of_1_post: InputMaybe<FieldSelectorEnum>;
  readonly A_collection_of___posts: InputMaybe<FieldSelectorEnum>;
  readonly A_collection_of_posts: InputMaybe<FieldSelectorEnum>;
  readonly About_Us: InputMaybe<FieldSelectorEnum>;
  readonly Account: InputMaybe<FieldSelectorEnum>;
  readonly All: InputMaybe<FieldSelectorEnum>;
  readonly Already_have_an_account_: InputMaybe<FieldSelectorEnum>;
  readonly Back: InputMaybe<FieldSelectorEnum>;
  readonly Billing_info_update_failed_: InputMaybe<FieldSelectorEnum>;
  readonly By: InputMaybe<FieldSelectorEnum>;
  readonly Close_search: InputMaybe<FieldSelectorEnum>;
  readonly Comments: InputMaybe<FieldSelectorEnum>;
  readonly Continue: InputMaybe<FieldSelectorEnum>;
  readonly Discover_more_of_what_matters_to_you: InputMaybe<FieldSelectorEnum>;
  readonly EMAIL: InputMaybe<FieldSelectorEnum>;
  readonly Email_Address: InputMaybe<FieldSelectorEnum>;
  readonly Featured_Articles: InputMaybe<FieldSelectorEnum>;
  readonly Follow: InputMaybe<FieldSelectorEnum>;
  readonly GO_TOP: InputMaybe<FieldSelectorEnum>;
  readonly Get_Started: InputMaybe<FieldSelectorEnum>;
  readonly Get_the_best_viral_stories_straight_into_your_inbox_: InputMaybe<FieldSelectorEnum>;
  readonly Get_the_latest_posts_delivered_right_to_your_inbox: InputMaybe<FieldSelectorEnum>;
  readonly Go_to: InputMaybe<FieldSelectorEnum>;
  readonly Go_to_article: InputMaybe<FieldSelectorEnum>;
  readonly Go_to_the_profile_of: InputMaybe<FieldSelectorEnum>;
  readonly Great__Next__complete_checkout_for_full_access_to: InputMaybe<FieldSelectorEnum>;
  readonly Hey_there_: InputMaybe<FieldSelectorEnum>;
  readonly Hi_I_m: InputMaybe<FieldSelectorEnum>;
  readonly Home: InputMaybe<FieldSelectorEnum>;
  readonly Latest_Articles: InputMaybe<FieldSelectorEnum>;
  readonly Latest_Posts: InputMaybe<FieldSelectorEnum>;
  readonly Listen: InputMaybe<FieldSelectorEnum>;
  readonly Log_in: InputMaybe<FieldSelectorEnum>;
  readonly Log_out: InputMaybe<FieldSelectorEnum>;
  readonly Message: InputMaybe<FieldSelectorEnum>;
  readonly More: InputMaybe<FieldSelectorEnum>;
  readonly Name: InputMaybe<FieldSelectorEnum>;
  readonly Navigate_up_down: InputMaybe<FieldSelectorEnum>;
  readonly Newer_Posts: InputMaybe<FieldSelectorEnum>;
  readonly Next_article: InputMaybe<FieldSelectorEnum>;
  readonly No_Stories: InputMaybe<FieldSelectorEnum>;
  readonly No_posts: InputMaybe<FieldSelectorEnum>;
  readonly No_results_found: InputMaybe<FieldSelectorEnum>;
  readonly Older_Posts: InputMaybe<FieldSelectorEnum>;
  readonly PHONE: InputMaybe<FieldSelectorEnum>;
  readonly Page: InputMaybe<FieldSelectorEnum>;
  readonly Please_enter_a_valid_email_address_: InputMaybe<FieldSelectorEnum>;
  readonly Posts_Tagged: InputMaybe<FieldSelectorEnum>;
  readonly Prev_article: InputMaybe<FieldSelectorEnum>;
  readonly Previous_article: InputMaybe<FieldSelectorEnum>;
  readonly Read_More: InputMaybe<FieldSelectorEnum>;
  readonly Read__a_href___url___more_posts__a__by_this_author: InputMaybe<FieldSelectorEnum>;
  readonly Read_more: InputMaybe<FieldSelectorEnum>;
  readonly Read_post: InputMaybe<FieldSelectorEnum>;
  readonly Read_the_rest_of_this_story_with_a_free_account_: InputMaybe<FieldSelectorEnum>;
  readonly Related_Articles: InputMaybe<FieldSelectorEnum>;
  readonly Related_Posts: InputMaybe<FieldSelectorEnum>;
  readonly Related__span_class__text_primary__Articles__span_: InputMaybe<FieldSelectorEnum>;
  readonly Related__span_class__text_success__Articles__span_: InputMaybe<FieldSelectorEnum>;
  readonly Search: InputMaybe<FieldSelectorEnum>;
  readonly Search_new_term: InputMaybe<FieldSelectorEnum>;
  readonly See_all___posts: InputMaybe<FieldSelectorEnum>;
  readonly Send: InputMaybe<FieldSelectorEnum>;
  readonly Share: InputMaybe<FieldSelectorEnum>;
  readonly Share_on: InputMaybe<FieldSelectorEnum>;
  readonly Share_this: InputMaybe<FieldSelectorEnum>;
  readonly Share_this_article: InputMaybe<FieldSelectorEnum>;
  readonly Sign_in: InputMaybe<FieldSelectorEnum>;
  readonly Sign_up: InputMaybe<FieldSelectorEnum>;
  readonly Sign_up_for_my_newsletter_: InputMaybe<FieldSelectorEnum>;
  readonly Signed_in_as: InputMaybe<FieldSelectorEnum>;
  readonly Stay_up_to_date__Get_all_the_latest___greatest_posts_delivered_straight_to_your_inbox: InputMaybe<FieldSelectorEnum>;
  readonly Stories: InputMaybe<FieldSelectorEnum>;
  readonly Subscribe: InputMaybe<FieldSelectorEnum>;
  readonly Subscribe_now: InputMaybe<FieldSelectorEnum>;
  readonly Subscribe_to: InputMaybe<FieldSelectorEnum>;
  readonly Subscribed_: InputMaybe<FieldSelectorEnum>;
  readonly Success__Your_account_is_fully_activated__you_now_have_access_to_all_content_: InputMaybe<FieldSelectorEnum>;
  readonly Success__Your_billing_info_is_updated_: InputMaybe<FieldSelectorEnum>;
  readonly Tag_Cloud: InputMaybe<FieldSelectorEnum>;
  readonly Tags: InputMaybe<FieldSelectorEnum>;
  readonly The_full_archive: InputMaybe<FieldSelectorEnum>;
  readonly There_are__total__posts_in_total: InputMaybe<FieldSelectorEnum>;
  readonly This_post_is_for_paying_subscribers_only: InputMaybe<FieldSelectorEnum>;
  readonly Total_number_of_posts: InputMaybe<FieldSelectorEnum>;
  readonly Unable_to_sign_you_in__Please_try_again_: InputMaybe<FieldSelectorEnum>;
  readonly Unfortunately__this_page_doesn_t_exist: InputMaybe<FieldSelectorEnum>;
  readonly Updated: InputMaybe<FieldSelectorEnum>;
  readonly Upgrade: InputMaybe<FieldSelectorEnum>;
  readonly View_Project: InputMaybe<FieldSelectorEnum>;
  readonly W_tej_chwili_nie_masz_dost_pu_do_tego_wpisu_na__strong__siteTitle___strong___ale_je_li_podniesiesz_wersj__swojego_konta_to_b_dziesz_m_g__zobaczy__jego_ca_o____jak_r_wnie__wszystkie_inne_posty_w_tym_archiwum__Subskrypcja_zajmuje_tylko_kilka_sekund_i_od_razu_masz_dost_p_: InputMaybe<FieldSelectorEnum>;
  readonly Want_more_stuff_like_this_: InputMaybe<FieldSelectorEnum>;
  readonly Welcome_back__You_ve_successfully_signed_in_: InputMaybe<FieldSelectorEnum>;
  readonly You_don_t_have_access_to_this_post_on__strong__siteTitle___strong__at_the_moment__but_if_you_upgrade_your_account_you_ll_be_able_to_see_the_whole_thing__as_well_as_all_the_other_posts_in_the_archive__Subscribing_only_takes_a_few_seconds_and_will_give_you_immediate_access_: InputMaybe<FieldSelectorEnum>;
  readonly You_ve_successfully_subscribed: InputMaybe<FieldSelectorEnum>;
  readonly You_ve_successfully_subscribed_to: InputMaybe<FieldSelectorEnum>;
  readonly Your_email_address: InputMaybe<FieldSelectorEnum>;
  readonly _1_Story: InputMaybe<FieldSelectorEnum>;
  readonly _1_min_read: InputMaybe<FieldSelectorEnum>;
  readonly _1_post: InputMaybe<FieldSelectorEnum>;
  readonly _2_posts: InputMaybe<FieldSelectorEnum>;
  readonly _strong_Great___strong__Check_your_inbox_and_click_the_link_to_confirm_your_subscription: InputMaybe<FieldSelectorEnum>;
  readonly _x1xminxread: InputMaybe<FieldSelectorEnum>;
  readonly _xStories: InputMaybe<FieldSelectorEnum>;
  readonly _xminxread: InputMaybe<FieldSelectorEnum>;
  readonly _xposts: InputMaybe<FieldSelectorEnum>;
  readonly featured_story: InputMaybe<FieldSelectorEnum>;
  readonly in: InputMaybe<FieldSelectorEnum>;
  readonly of: InputMaybe<FieldSelectorEnum>;
  readonly shares: InputMaybe<FieldSelectorEnum>;
  readonly with_the_email_address: InputMaybe<FieldSelectorEnum>;
  readonly youremail_example_com: InputMaybe<FieldSelectorEnum>;
};

type LocaleJsonContentFilterInput = {
  readonly ADDRESS: InputMaybe<StringQueryOperatorInput>;
  readonly A_collection_of_1_post: InputMaybe<StringQueryOperatorInput>;
  readonly A_collection_of___posts: InputMaybe<StringQueryOperatorInput>;
  readonly A_collection_of_posts: InputMaybe<StringQueryOperatorInput>;
  readonly About_Us: InputMaybe<StringQueryOperatorInput>;
  readonly Account: InputMaybe<StringQueryOperatorInput>;
  readonly All: InputMaybe<StringQueryOperatorInput>;
  readonly Already_have_an_account_: InputMaybe<StringQueryOperatorInput>;
  readonly Back: InputMaybe<StringQueryOperatorInput>;
  readonly Billing_info_update_failed_: InputMaybe<StringQueryOperatorInput>;
  readonly By: InputMaybe<StringQueryOperatorInput>;
  readonly Close_search: InputMaybe<StringQueryOperatorInput>;
  readonly Comments: InputMaybe<StringQueryOperatorInput>;
  readonly Continue: InputMaybe<StringQueryOperatorInput>;
  readonly Discover_more_of_what_matters_to_you: InputMaybe<StringQueryOperatorInput>;
  readonly EMAIL: InputMaybe<StringQueryOperatorInput>;
  readonly Email_Address: InputMaybe<StringQueryOperatorInput>;
  readonly Featured_Articles: InputMaybe<StringQueryOperatorInput>;
  readonly Follow: InputMaybe<StringQueryOperatorInput>;
  readonly GO_TOP: InputMaybe<StringQueryOperatorInput>;
  readonly Get_Started: InputMaybe<StringQueryOperatorInput>;
  readonly Get_the_best_viral_stories_straight_into_your_inbox_: InputMaybe<StringQueryOperatorInput>;
  readonly Get_the_latest_posts_delivered_right_to_your_inbox: InputMaybe<StringQueryOperatorInput>;
  readonly Go_to: InputMaybe<StringQueryOperatorInput>;
  readonly Go_to_article: InputMaybe<StringQueryOperatorInput>;
  readonly Go_to_the_profile_of: InputMaybe<StringQueryOperatorInput>;
  readonly Great__Next__complete_checkout_for_full_access_to: InputMaybe<StringQueryOperatorInput>;
  readonly Hey_there_: InputMaybe<StringQueryOperatorInput>;
  readonly Hi_I_m: InputMaybe<StringQueryOperatorInput>;
  readonly Home: InputMaybe<StringQueryOperatorInput>;
  readonly Latest_Articles: InputMaybe<StringQueryOperatorInput>;
  readonly Latest_Posts: InputMaybe<StringQueryOperatorInput>;
  readonly Listen: InputMaybe<StringQueryOperatorInput>;
  readonly Log_in: InputMaybe<StringQueryOperatorInput>;
  readonly Log_out: InputMaybe<StringQueryOperatorInput>;
  readonly Message: InputMaybe<StringQueryOperatorInput>;
  readonly More: InputMaybe<StringQueryOperatorInput>;
  readonly Name: InputMaybe<StringQueryOperatorInput>;
  readonly Navigate_up_down: InputMaybe<StringQueryOperatorInput>;
  readonly Newer_Posts: InputMaybe<StringQueryOperatorInput>;
  readonly Next_article: InputMaybe<StringQueryOperatorInput>;
  readonly No_Stories: InputMaybe<StringQueryOperatorInput>;
  readonly No_posts: InputMaybe<StringQueryOperatorInput>;
  readonly No_results_found: InputMaybe<StringQueryOperatorInput>;
  readonly Older_Posts: InputMaybe<StringQueryOperatorInput>;
  readonly PHONE: InputMaybe<StringQueryOperatorInput>;
  readonly Page: InputMaybe<StringQueryOperatorInput>;
  readonly Please_enter_a_valid_email_address_: InputMaybe<StringQueryOperatorInput>;
  readonly Posts_Tagged: InputMaybe<StringQueryOperatorInput>;
  readonly Prev_article: InputMaybe<StringQueryOperatorInput>;
  readonly Previous_article: InputMaybe<StringQueryOperatorInput>;
  readonly Read_More: InputMaybe<StringQueryOperatorInput>;
  readonly Read__a_href___url___more_posts__a__by_this_author: InputMaybe<StringQueryOperatorInput>;
  readonly Read_more: InputMaybe<StringQueryOperatorInput>;
  readonly Read_post: InputMaybe<StringQueryOperatorInput>;
  readonly Read_the_rest_of_this_story_with_a_free_account_: InputMaybe<StringQueryOperatorInput>;
  readonly Related_Articles: InputMaybe<StringQueryOperatorInput>;
  readonly Related_Posts: InputMaybe<StringQueryOperatorInput>;
  readonly Related__span_class__text_primary__Articles__span_: InputMaybe<StringQueryOperatorInput>;
  readonly Related__span_class__text_success__Articles__span_: InputMaybe<StringQueryOperatorInput>;
  readonly Search: InputMaybe<StringQueryOperatorInput>;
  readonly Search_new_term: InputMaybe<StringQueryOperatorInput>;
  readonly See_all___posts: InputMaybe<StringQueryOperatorInput>;
  readonly Send: InputMaybe<StringQueryOperatorInput>;
  readonly Share: InputMaybe<StringQueryOperatorInput>;
  readonly Share_on: InputMaybe<StringQueryOperatorInput>;
  readonly Share_this: InputMaybe<StringQueryOperatorInput>;
  readonly Share_this_article: InputMaybe<StringQueryOperatorInput>;
  readonly Sign_in: InputMaybe<StringQueryOperatorInput>;
  readonly Sign_up: InputMaybe<StringQueryOperatorInput>;
  readonly Sign_up_for_my_newsletter_: InputMaybe<StringQueryOperatorInput>;
  readonly Signed_in_as: InputMaybe<StringQueryOperatorInput>;
  readonly Stay_up_to_date__Get_all_the_latest___greatest_posts_delivered_straight_to_your_inbox: InputMaybe<StringQueryOperatorInput>;
  readonly Stories: InputMaybe<StringQueryOperatorInput>;
  readonly Subscribe: InputMaybe<StringQueryOperatorInput>;
  readonly Subscribe_now: InputMaybe<StringQueryOperatorInput>;
  readonly Subscribe_to: InputMaybe<StringQueryOperatorInput>;
  readonly Subscribed_: InputMaybe<StringQueryOperatorInput>;
  readonly Success__Your_account_is_fully_activated__you_now_have_access_to_all_content_: InputMaybe<StringQueryOperatorInput>;
  readonly Success__Your_billing_info_is_updated_: InputMaybe<StringQueryOperatorInput>;
  readonly Tag_Cloud: InputMaybe<StringQueryOperatorInput>;
  readonly Tags: InputMaybe<StringQueryOperatorInput>;
  readonly The_full_archive: InputMaybe<StringQueryOperatorInput>;
  readonly There_are__total__posts_in_total: InputMaybe<StringQueryOperatorInput>;
  readonly This_post_is_for_paying_subscribers_only: InputMaybe<StringQueryOperatorInput>;
  readonly Total_number_of_posts: InputMaybe<StringQueryOperatorInput>;
  readonly Unable_to_sign_you_in__Please_try_again_: InputMaybe<StringQueryOperatorInput>;
  readonly Unfortunately__this_page_doesn_t_exist: InputMaybe<StringQueryOperatorInput>;
  readonly Updated: InputMaybe<StringQueryOperatorInput>;
  readonly Upgrade: InputMaybe<StringQueryOperatorInput>;
  readonly View_Project: InputMaybe<StringQueryOperatorInput>;
  readonly W_tej_chwili_nie_masz_dost_pu_do_tego_wpisu_na__strong__siteTitle___strong___ale_je_li_podniesiesz_wersj__swojego_konta_to_b_dziesz_m_g__zobaczy__jego_ca_o____jak_r_wnie__wszystkie_inne_posty_w_tym_archiwum__Subskrypcja_zajmuje_tylko_kilka_sekund_i_od_razu_masz_dost_p_: InputMaybe<StringQueryOperatorInput>;
  readonly Want_more_stuff_like_this_: InputMaybe<StringQueryOperatorInput>;
  readonly Welcome_back__You_ve_successfully_signed_in_: InputMaybe<StringQueryOperatorInput>;
  readonly You_don_t_have_access_to_this_post_on__strong__siteTitle___strong__at_the_moment__but_if_you_upgrade_your_account_you_ll_be_able_to_see_the_whole_thing__as_well_as_all_the_other_posts_in_the_archive__Subscribing_only_takes_a_few_seconds_and_will_give_you_immediate_access_: InputMaybe<StringQueryOperatorInput>;
  readonly You_ve_successfully_subscribed: InputMaybe<StringQueryOperatorInput>;
  readonly You_ve_successfully_subscribed_to: InputMaybe<StringQueryOperatorInput>;
  readonly Your_email_address: InputMaybe<StringQueryOperatorInput>;
  readonly _1_Story: InputMaybe<StringQueryOperatorInput>;
  readonly _1_min_read: InputMaybe<StringQueryOperatorInput>;
  readonly _1_post: InputMaybe<StringQueryOperatorInput>;
  readonly _2_posts: InputMaybe<StringQueryOperatorInput>;
  readonly _strong_Great___strong__Check_your_inbox_and_click_the_link_to_confirm_your_subscription: InputMaybe<StringQueryOperatorInput>;
  readonly _x1xminxread: InputMaybe<StringQueryOperatorInput>;
  readonly _xStories: InputMaybe<StringQueryOperatorInput>;
  readonly _xminxread: InputMaybe<StringQueryOperatorInput>;
  readonly _xposts: InputMaybe<StringQueryOperatorInput>;
  readonly featured_story: InputMaybe<StringQueryOperatorInput>;
  readonly in: InputMaybe<StringQueryOperatorInput>;
  readonly of: InputMaybe<StringQueryOperatorInput>;
  readonly shares: InputMaybe<StringQueryOperatorInput>;
  readonly with_the_email_address: InputMaybe<StringQueryOperatorInput>;
  readonly youremail_example_com: InputMaybe<StringQueryOperatorInput>;
};

type LocaleJsonContentSortInput = {
  readonly ADDRESS: InputMaybe<SortOrderEnum>;
  readonly A_collection_of_1_post: InputMaybe<SortOrderEnum>;
  readonly A_collection_of___posts: InputMaybe<SortOrderEnum>;
  readonly A_collection_of_posts: InputMaybe<SortOrderEnum>;
  readonly About_Us: InputMaybe<SortOrderEnum>;
  readonly Account: InputMaybe<SortOrderEnum>;
  readonly All: InputMaybe<SortOrderEnum>;
  readonly Already_have_an_account_: InputMaybe<SortOrderEnum>;
  readonly Back: InputMaybe<SortOrderEnum>;
  readonly Billing_info_update_failed_: InputMaybe<SortOrderEnum>;
  readonly By: InputMaybe<SortOrderEnum>;
  readonly Close_search: InputMaybe<SortOrderEnum>;
  readonly Comments: InputMaybe<SortOrderEnum>;
  readonly Continue: InputMaybe<SortOrderEnum>;
  readonly Discover_more_of_what_matters_to_you: InputMaybe<SortOrderEnum>;
  readonly EMAIL: InputMaybe<SortOrderEnum>;
  readonly Email_Address: InputMaybe<SortOrderEnum>;
  readonly Featured_Articles: InputMaybe<SortOrderEnum>;
  readonly Follow: InputMaybe<SortOrderEnum>;
  readonly GO_TOP: InputMaybe<SortOrderEnum>;
  readonly Get_Started: InputMaybe<SortOrderEnum>;
  readonly Get_the_best_viral_stories_straight_into_your_inbox_: InputMaybe<SortOrderEnum>;
  readonly Get_the_latest_posts_delivered_right_to_your_inbox: InputMaybe<SortOrderEnum>;
  readonly Go_to: InputMaybe<SortOrderEnum>;
  readonly Go_to_article: InputMaybe<SortOrderEnum>;
  readonly Go_to_the_profile_of: InputMaybe<SortOrderEnum>;
  readonly Great__Next__complete_checkout_for_full_access_to: InputMaybe<SortOrderEnum>;
  readonly Hey_there_: InputMaybe<SortOrderEnum>;
  readonly Hi_I_m: InputMaybe<SortOrderEnum>;
  readonly Home: InputMaybe<SortOrderEnum>;
  readonly Latest_Articles: InputMaybe<SortOrderEnum>;
  readonly Latest_Posts: InputMaybe<SortOrderEnum>;
  readonly Listen: InputMaybe<SortOrderEnum>;
  readonly Log_in: InputMaybe<SortOrderEnum>;
  readonly Log_out: InputMaybe<SortOrderEnum>;
  readonly Message: InputMaybe<SortOrderEnum>;
  readonly More: InputMaybe<SortOrderEnum>;
  readonly Name: InputMaybe<SortOrderEnum>;
  readonly Navigate_up_down: InputMaybe<SortOrderEnum>;
  readonly Newer_Posts: InputMaybe<SortOrderEnum>;
  readonly Next_article: InputMaybe<SortOrderEnum>;
  readonly No_Stories: InputMaybe<SortOrderEnum>;
  readonly No_posts: InputMaybe<SortOrderEnum>;
  readonly No_results_found: InputMaybe<SortOrderEnum>;
  readonly Older_Posts: InputMaybe<SortOrderEnum>;
  readonly PHONE: InputMaybe<SortOrderEnum>;
  readonly Page: InputMaybe<SortOrderEnum>;
  readonly Please_enter_a_valid_email_address_: InputMaybe<SortOrderEnum>;
  readonly Posts_Tagged: InputMaybe<SortOrderEnum>;
  readonly Prev_article: InputMaybe<SortOrderEnum>;
  readonly Previous_article: InputMaybe<SortOrderEnum>;
  readonly Read_More: InputMaybe<SortOrderEnum>;
  readonly Read__a_href___url___more_posts__a__by_this_author: InputMaybe<SortOrderEnum>;
  readonly Read_more: InputMaybe<SortOrderEnum>;
  readonly Read_post: InputMaybe<SortOrderEnum>;
  readonly Read_the_rest_of_this_story_with_a_free_account_: InputMaybe<SortOrderEnum>;
  readonly Related_Articles: InputMaybe<SortOrderEnum>;
  readonly Related_Posts: InputMaybe<SortOrderEnum>;
  readonly Related__span_class__text_primary__Articles__span_: InputMaybe<SortOrderEnum>;
  readonly Related__span_class__text_success__Articles__span_: InputMaybe<SortOrderEnum>;
  readonly Search: InputMaybe<SortOrderEnum>;
  readonly Search_new_term: InputMaybe<SortOrderEnum>;
  readonly See_all___posts: InputMaybe<SortOrderEnum>;
  readonly Send: InputMaybe<SortOrderEnum>;
  readonly Share: InputMaybe<SortOrderEnum>;
  readonly Share_on: InputMaybe<SortOrderEnum>;
  readonly Share_this: InputMaybe<SortOrderEnum>;
  readonly Share_this_article: InputMaybe<SortOrderEnum>;
  readonly Sign_in: InputMaybe<SortOrderEnum>;
  readonly Sign_up: InputMaybe<SortOrderEnum>;
  readonly Sign_up_for_my_newsletter_: InputMaybe<SortOrderEnum>;
  readonly Signed_in_as: InputMaybe<SortOrderEnum>;
  readonly Stay_up_to_date__Get_all_the_latest___greatest_posts_delivered_straight_to_your_inbox: InputMaybe<SortOrderEnum>;
  readonly Stories: InputMaybe<SortOrderEnum>;
  readonly Subscribe: InputMaybe<SortOrderEnum>;
  readonly Subscribe_now: InputMaybe<SortOrderEnum>;
  readonly Subscribe_to: InputMaybe<SortOrderEnum>;
  readonly Subscribed_: InputMaybe<SortOrderEnum>;
  readonly Success__Your_account_is_fully_activated__you_now_have_access_to_all_content_: InputMaybe<SortOrderEnum>;
  readonly Success__Your_billing_info_is_updated_: InputMaybe<SortOrderEnum>;
  readonly Tag_Cloud: InputMaybe<SortOrderEnum>;
  readonly Tags: InputMaybe<SortOrderEnum>;
  readonly The_full_archive: InputMaybe<SortOrderEnum>;
  readonly There_are__total__posts_in_total: InputMaybe<SortOrderEnum>;
  readonly This_post_is_for_paying_subscribers_only: InputMaybe<SortOrderEnum>;
  readonly Total_number_of_posts: InputMaybe<SortOrderEnum>;
  readonly Unable_to_sign_you_in__Please_try_again_: InputMaybe<SortOrderEnum>;
  readonly Unfortunately__this_page_doesn_t_exist: InputMaybe<SortOrderEnum>;
  readonly Updated: InputMaybe<SortOrderEnum>;
  readonly Upgrade: InputMaybe<SortOrderEnum>;
  readonly View_Project: InputMaybe<SortOrderEnum>;
  readonly W_tej_chwili_nie_masz_dost_pu_do_tego_wpisu_na__strong__siteTitle___strong___ale_je_li_podniesiesz_wersj__swojego_konta_to_b_dziesz_m_g__zobaczy__jego_ca_o____jak_r_wnie__wszystkie_inne_posty_w_tym_archiwum__Subskrypcja_zajmuje_tylko_kilka_sekund_i_od_razu_masz_dost_p_: InputMaybe<SortOrderEnum>;
  readonly Want_more_stuff_like_this_: InputMaybe<SortOrderEnum>;
  readonly Welcome_back__You_ve_successfully_signed_in_: InputMaybe<SortOrderEnum>;
  readonly You_don_t_have_access_to_this_post_on__strong__siteTitle___strong__at_the_moment__but_if_you_upgrade_your_account_you_ll_be_able_to_see_the_whole_thing__as_well_as_all_the_other_posts_in_the_archive__Subscribing_only_takes_a_few_seconds_and_will_give_you_immediate_access_: InputMaybe<SortOrderEnum>;
  readonly You_ve_successfully_subscribed: InputMaybe<SortOrderEnum>;
  readonly You_ve_successfully_subscribed_to: InputMaybe<SortOrderEnum>;
  readonly Your_email_address: InputMaybe<SortOrderEnum>;
  readonly _1_Story: InputMaybe<SortOrderEnum>;
  readonly _1_min_read: InputMaybe<SortOrderEnum>;
  readonly _1_post: InputMaybe<SortOrderEnum>;
  readonly _2_posts: InputMaybe<SortOrderEnum>;
  readonly _strong_Great___strong__Check_your_inbox_and_click_the_link_to_confirm_your_subscription: InputMaybe<SortOrderEnum>;
  readonly _x1xminxread: InputMaybe<SortOrderEnum>;
  readonly _xStories: InputMaybe<SortOrderEnum>;
  readonly _xminxread: InputMaybe<SortOrderEnum>;
  readonly _xposts: InputMaybe<SortOrderEnum>;
  readonly featured_story: InputMaybe<SortOrderEnum>;
  readonly in: InputMaybe<SortOrderEnum>;
  readonly of: InputMaybe<SortOrderEnum>;
  readonly shares: InputMaybe<SortOrderEnum>;
  readonly with_the_email_address: InputMaybe<SortOrderEnum>;
  readonly youremail_example_com: InputMaybe<SortOrderEnum>;
};

type LocaleJsonEdge = {
  readonly next: Maybe<LocaleJson>;
  readonly node: LocaleJson;
  readonly previous: Maybe<LocaleJson>;
};

type LocaleJsonFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<LocaleJsonContentFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly language: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type LocaleJsonFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<LocaleJsonContentFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly language: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type LocaleJsonFilterListInput = {
  readonly elemMatch: InputMaybe<LocaleJsonFilterInput>;
};

type LocaleJsonGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<LocaleJsonEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<LocaleJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<LocaleJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type LocaleJsonGroupConnection_distinctArgs = {
  field: LocaleJsonFieldSelector;
};


type LocaleJsonGroupConnection_groupArgs = {
  field: LocaleJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type LocaleJsonGroupConnection_maxArgs = {
  field: LocaleJsonFieldSelector;
};


type LocaleJsonGroupConnection_minArgs = {
  field: LocaleJsonFieldSelector;
};


type LocaleJsonGroupConnection_sumArgs = {
  field: LocaleJsonFieldSelector;
};

type LocaleJsonSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<LocaleJsonContentSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly language: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allGhostAuthor: GhostAuthorConnection;
  readonly allGhostPage: GhostPageConnection;
  readonly allGhostPost: GhostPostConnection;
  readonly allGhostSettings: GhostSettingsConnection;
  readonly allGhostTag: GhostTagConnection;
  readonly allGhostTiers: GhostTiersConnection;
  readonly allHtmlRehype: HtmlRehypeConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allLocaleJson: LocaleJsonConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly ghostAuthor: Maybe<GhostAuthor>;
  readonly ghostPage: Maybe<GhostPage>;
  readonly ghostPost: Maybe<GhostPost>;
  readonly ghostSettings: Maybe<GhostSettings>;
  readonly ghostTag: Maybe<GhostTag>;
  readonly ghostTiers: Maybe<GhostTiers>;
  readonly htmlRehype: Maybe<HtmlRehype>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly localeJson: Maybe<LocaleJson>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
};


type Query_allGhostAuthorArgs = {
  filter: InputMaybe<GhostAuthorFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<GhostAuthorSortInput>>>;
};


type Query_allGhostPageArgs = {
  filter: InputMaybe<GhostPageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<GhostPageSortInput>>>;
};


type Query_allGhostPostArgs = {
  filter: InputMaybe<GhostPostFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<GhostPostSortInput>>>;
};


type Query_allGhostSettingsArgs = {
  filter: InputMaybe<GhostSettingsFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<GhostSettingsSortInput>>>;
};


type Query_allGhostTagArgs = {
  filter: InputMaybe<GhostTagFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<GhostTagSortInput>>>;
};


type Query_allGhostTiersArgs = {
  filter: InputMaybe<GhostTiersFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<GhostTiersSortInput>>>;
};


type Query_allHtmlRehypeArgs = {
  filter: InputMaybe<HtmlRehypeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<HtmlRehypeSortInput>>>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpSortInput>>>;
};


type Query_allLocaleJsonArgs = {
  filter: InputMaybe<LocaleJsonFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<LocaleJsonSortInput>>>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  childLocaleJson: InputMaybe<LocaleJsonFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  childrenLocaleJson: InputMaybe<LocaleJsonFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_ghostAuthorArgs = {
  bio: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  count: InputMaybe<GhostPostCountFilterInput>;
  cover_image: InputMaybe<StringQueryOperatorInput>;
  facebook: InputMaybe<StringQueryOperatorInput>;
  fields: InputMaybe<GhostAuthorFieldsFilterInput>;
  ghostId: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  localCoverImage: InputMaybe<FileFilterInput>;
  localProfileImage: InputMaybe<FileFilterInput>;
  location: InputMaybe<StringQueryOperatorInput>;
  meta_description: InputMaybe<StringQueryOperatorInput>;
  meta_title: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  postCount: InputMaybe<IntQueryOperatorInput>;
  profile_image: InputMaybe<StringQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  twitter: InputMaybe<StringQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
  website: InputMaybe<StringQueryOperatorInput>;
};


type Query_ghostPageArgs = {
  authors: InputMaybe<GhostAuthorFilterListInput>;
  canonical_url: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  codeinjection_foot: InputMaybe<StringQueryOperatorInput>;
  codeinjection_head: InputMaybe<StringQueryOperatorInput>;
  codeinjection_styles: InputMaybe<StringQueryOperatorInput>;
  comment_id: InputMaybe<StringQueryOperatorInput>;
  created_at: InputMaybe<DateQueryOperatorInput>;
  custom_excerpt: InputMaybe<StringQueryOperatorInput>;
  custom_template: InputMaybe<StringQueryOperatorInput>;
  email_subject: InputMaybe<StringQueryOperatorInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  feature_image: InputMaybe<StringQueryOperatorInput>;
  feature_image_alt: InputMaybe<StringQueryOperatorInput>;
  feature_image_caption: InputMaybe<StringQueryOperatorInput>;
  featured: InputMaybe<BooleanQueryOperatorInput>;
  html: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  localFeatureImage: InputMaybe<FileFilterInput>;
  meta_description: InputMaybe<StringQueryOperatorInput>;
  meta_title: InputMaybe<StringQueryOperatorInput>;
  og_description: InputMaybe<StringQueryOperatorInput>;
  og_image: InputMaybe<StringQueryOperatorInput>;
  og_title: InputMaybe<StringQueryOperatorInput>;
  page: InputMaybe<BooleanQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  plaintext: InputMaybe<StringQueryOperatorInput>;
  primary_author: InputMaybe<GhostAuthorFilterInput>;
  primary_tag: InputMaybe<GhostTagFilterInput>;
  published_at: InputMaybe<DateQueryOperatorInput>;
  reading_time: InputMaybe<IntQueryOperatorInput>;
  send_email_when_published: InputMaybe<BooleanQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  tags: InputMaybe<GhostTagFilterListInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  twitter_description: InputMaybe<StringQueryOperatorInput>;
  twitter_image: InputMaybe<StringQueryOperatorInput>;
  twitter_title: InputMaybe<StringQueryOperatorInput>;
  updated_at: InputMaybe<DateQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
  uuid: InputMaybe<StringQueryOperatorInput>;
  visibility: InputMaybe<StringQueryOperatorInput>;
};


type Query_ghostPostArgs = {
  access: InputMaybe<BooleanQueryOperatorInput>;
  authors: InputMaybe<GhostAuthorFilterListInput>;
  canonical_url: InputMaybe<StringQueryOperatorInput>;
  childHtmlRehype: InputMaybe<HtmlRehypeFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenHtmlRehype: InputMaybe<HtmlRehypeFilterListInput>;
  codeinjection_foot: InputMaybe<StringQueryOperatorInput>;
  codeinjection_head: InputMaybe<StringQueryOperatorInput>;
  codeinjection_styles: InputMaybe<StringQueryOperatorInput>;
  comment_id: InputMaybe<StringQueryOperatorInput>;
  comments: InputMaybe<BooleanQueryOperatorInput>;
  created_at: InputMaybe<DateQueryOperatorInput>;
  custom_excerpt: InputMaybe<StringQueryOperatorInput>;
  custom_template: InputMaybe<StringQueryOperatorInput>;
  email_subject: InputMaybe<StringQueryOperatorInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  feature_image: InputMaybe<StringQueryOperatorInput>;
  feature_image_alt: InputMaybe<StringQueryOperatorInput>;
  feature_image_caption: InputMaybe<StringQueryOperatorInput>;
  featured: InputMaybe<BooleanQueryOperatorInput>;
  fields: InputMaybe<GhostPostFieldsFilterInput>;
  ghostId: InputMaybe<StringQueryOperatorInput>;
  html: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  localFeatureImage: InputMaybe<FileFilterInput>;
  meta_description: InputMaybe<StringQueryOperatorInput>;
  meta_title: InputMaybe<StringQueryOperatorInput>;
  og_description: InputMaybe<StringQueryOperatorInput>;
  og_image: InputMaybe<StringQueryOperatorInput>;
  og_title: InputMaybe<StringQueryOperatorInput>;
  page: InputMaybe<BooleanQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  plaintext: InputMaybe<StringQueryOperatorInput>;
  primary_author: InputMaybe<GhostAuthorFilterInput>;
  primary_tag: InputMaybe<GhostTagFilterInput>;
  published_at: InputMaybe<DateQueryOperatorInput>;
  reading_time: InputMaybe<IntQueryOperatorInput>;
  send_email_when_published: InputMaybe<BooleanQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  tags: InputMaybe<GhostTagFilterListInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  twitter_description: InputMaybe<StringQueryOperatorInput>;
  twitter_image: InputMaybe<StringQueryOperatorInput>;
  twitter_title: InputMaybe<StringQueryOperatorInput>;
  updated_at: InputMaybe<DateQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
  uuid: InputMaybe<StringQueryOperatorInput>;
  visibility: InputMaybe<StringQueryOperatorInput>;
};


type Query_ghostSettingsArgs = {
  accent_color: InputMaybe<StringQueryOperatorInput>;
  active_timezone: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  codeinjection_foot: InputMaybe<StringQueryOperatorInput>;
  codeinjection_head: InputMaybe<StringQueryOperatorInput>;
  codeinjection_styles: InputMaybe<StringQueryOperatorInput>;
  comments_enabled: InputMaybe<StringQueryOperatorInput>;
  cover_image: InputMaybe<StringQueryOperatorInput>;
  default_locale: InputMaybe<StringQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  facebook: InputMaybe<StringQueryOperatorInput>;
  fields: InputMaybe<GhostSettingsFieldsFilterInput>;
  ghostId: InputMaybe<IntQueryOperatorInput>;
  icon: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  lang: InputMaybe<StringQueryOperatorInput>;
  localCoverImage: InputMaybe<FileFilterInput>;
  localIcon: InputMaybe<FileFilterInput>;
  localLogo: InputMaybe<FileFilterInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  logo: InputMaybe<StringQueryOperatorInput>;
  members_enabled: InputMaybe<BooleanQueryOperatorInput>;
  members_invite_only: InputMaybe<BooleanQueryOperatorInput>;
  members_support_address: InputMaybe<StringQueryOperatorInput>;
  meta_description: InputMaybe<StringQueryOperatorInput>;
  meta_title: InputMaybe<StringQueryOperatorInput>;
  navigation: InputMaybe<GhostNavigationFilterListInput>;
  og_description: InputMaybe<StringQueryOperatorInput>;
  og_image: InputMaybe<StringQueryOperatorInput>;
  og_title: InputMaybe<StringQueryOperatorInput>;
  paid_members_enabled: InputMaybe<BooleanQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  portal_button: InputMaybe<BooleanQueryOperatorInput>;
  portal_button_signup_text: InputMaybe<StringQueryOperatorInput>;
  portal_button_style: InputMaybe<StringQueryOperatorInput>;
  portal_name: InputMaybe<BooleanQueryOperatorInput>;
  portal_plans: InputMaybe<StringQueryOperatorInput>;
  secondary_navigation: InputMaybe<GhostNavigationFilterListInput>;
  timezone: InputMaybe<StringQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  twitter: InputMaybe<StringQueryOperatorInput>;
  twitter_description: InputMaybe<StringQueryOperatorInput>;
  twitter_image: InputMaybe<StringQueryOperatorInput>;
  twitter_title: InputMaybe<StringQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};


type Query_ghostTagArgs = {
  accent_color: InputMaybe<StringQueryOperatorInput>;
  canonical_url: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  codeinjection_foot: InputMaybe<StringQueryOperatorInput>;
  codeinjection_head: InputMaybe<StringQueryOperatorInput>;
  count: InputMaybe<GhostPostCountFilterInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  feature_image: InputMaybe<StringQueryOperatorInput>;
  ghostId: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  localFeatureImage: InputMaybe<FileFilterInput>;
  meta_description: InputMaybe<StringQueryOperatorInput>;
  meta_title: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  og_description: InputMaybe<StringQueryOperatorInput>;
  og_image: InputMaybe<StringQueryOperatorInput>;
  og_title: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  postCount: InputMaybe<IntQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  twitter_description: InputMaybe<StringQueryOperatorInput>;
  twitter_image: InputMaybe<StringQueryOperatorInput>;
  twitter_title: InputMaybe<StringQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
  visibility: InputMaybe<StringQueryOperatorInput>;
};


type Query_ghostTiersArgs = {
  active: InputMaybe<BooleanQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  created_at: InputMaybe<DateQueryOperatorInput>;
  currency: InputMaybe<StringQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  ghostId: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  monthly_price: InputMaybe<IntQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  stripe_prices: InputMaybe<StringQueryOperatorInput>;
  trial_days: InputMaybe<IntQueryOperatorInput>;
  type: InputMaybe<StringQueryOperatorInput>;
  updated_at: InputMaybe<DateQueryOperatorInput>;
  visibility: InputMaybe<StringQueryOperatorInput>;
  welcome_page_url: InputMaybe<StringQueryOperatorInput>;
  yearly_price: InputMaybe<IntQueryOperatorInput>;
};


type Query_htmlRehypeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  context: InputMaybe<HtmlRehypeContextFilterInput>;
  html: InputMaybe<StringQueryOperatorInput>;
  htmlAst: InputMaybe<JSONQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  tableOfContents: InputMaybe<JSONQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_localeJsonArgs = {
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<LocaleJsonContentFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  language: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFieldSelector>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jsxRuntime: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pathPrefix: InputMaybe<FieldSelectorEnum>;
  readonly polyfill: InputMaybe<FieldSelectorEnum>;
  readonly port: InputMaybe<FieldSelectorEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
  readonly trailingSlash: InputMaybe<FieldSelectorEnum>;
};

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldSelector = {
  readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly functionRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
  readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginName: InputMaybe<FieldSelectorEnum>;
  readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
};

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionSortInput = {
  readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly functionRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
  readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginName: InputMaybe<SortOrderEnum>;
  readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
};

type SiteGraphqlTypegen = {
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFieldSelector = {
  readonly generateOnBuild: InputMaybe<FieldSelectorEnum>;
  readonly typesOutputPath: InputMaybe<FieldSelectorEnum>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGraphqlTypegenSortInput = {
  readonly generateOnBuild: InputMaybe<SortOrderEnum>;
  readonly typesOutputPath: InputMaybe<SortOrderEnum>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly component: InputMaybe<FieldSelectorEnum>;
  readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly pageContext: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
};

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly component: InputMaybe<SortOrderEnum>;
  readonly componentChunkName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly internalComponentName: InputMaybe<SortOrderEnum>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly pageContext: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly pluginCreator: InputMaybe<SitePluginSortInput>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldSelector = {
  readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
  readonly packageJson: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
  readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
  readonly resolve: InputMaybe<FieldSelectorEnum>;
  readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginSortInput = {
  readonly browserAPIs: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nodeAPIs: InputMaybe<SortOrderEnum>;
  readonly packageJson: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginFilepath: InputMaybe<SortOrderEnum>;
  readonly pluginOptions: InputMaybe<SortOrderEnum>;
  readonly resolve: InputMaybe<SortOrderEnum>;
  readonly ssrAPIs: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadata = {
  readonly description: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly siteUrl: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly siteUrl: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type SiteSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenSortInput>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jsxRuntime: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pathPrefix: InputMaybe<SortOrderEnum>;
  readonly polyfill: InputMaybe<SortOrderEnum>;
  readonly port: InputMaybe<SortOrderEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
  readonly trailingSlash: InputMaybe<SortOrderEnum>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };

type GhostAuthorFieldsFragment = { readonly slug: string, readonly name: string, readonly bio: string | null, readonly cover_image: string | null, readonly profile_image: string | null, readonly location: string | null, readonly website: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly url: string };

type GhostAuthorQueryQueryVariables = Exact<{
  slug: Scalars['String'];
  limit: Scalars['Int'];
  skip: Scalars['Int'];
}>;


type GhostAuthorQueryQuery = { readonly ghostAuthor: { readonly slug: string, readonly name: string, readonly bio: string | null, readonly cover_image: string | null, readonly profile_image: string | null, readonly location: string | null, readonly website: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly url: string, readonly localCoverImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly localProfileImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly allGhostPost: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly title: string, readonly slug: string, readonly featured: boolean, readonly feature_image: string | null, readonly excerpt: string | null, readonly custom_excerpt: string | null, readonly visibility: string, readonly created_at: string, readonly published_at: string | null, readonly updated_at: string | null, readonly meta_title: string | null, readonly meta_description: string | null, readonly og_description: string | null, readonly og_image: string | null, readonly og_title: string | null, readonly twitter_description: string | null, readonly twitter_image: string | null, readonly twitter_title: string | null, readonly plaintext: string | null, readonly html: string | null, readonly url: string, readonly canonical_url: string | null, readonly uuid: string, readonly page: boolean | null, readonly codeinjection_foot: string | null, readonly codeinjection_head: string | null, readonly codeinjection_styles: string | null, readonly comment_id: string | null, readonly reading_time: number | null, readonly created_at_pretty: string, readonly published_at_pretty: string | null, readonly published_at_month: string | null, readonly published_at_archive: string | null, readonly updated_at_pretty: string | null, readonly localFeatureImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly authors: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly website: string | null, readonly id: string, readonly url: string, readonly localProfileImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null>, readonly primary_author: { readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly url: string, readonly website: string | null }, readonly primary_tag: { readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null, readonly tags: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null> | null, readonly internal: { readonly type: string }, readonly childHtmlRehype: { readonly html: string | null, readonly tableOfContents: Record<string, unknown> | null } | null } }> } };

type GhostFeaturedPostsQueryQueryVariables = Exact<{ [key: string]: never; }>;


type GhostFeaturedPostsQueryQuery = { readonly allGhostPost: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly title: string, readonly slug: string, readonly featured: boolean, readonly feature_image: string | null, readonly excerpt: string | null, readonly custom_excerpt: string | null, readonly visibility: string, readonly created_at: string, readonly published_at: string | null, readonly updated_at: string | null, readonly meta_title: string | null, readonly meta_description: string | null, readonly og_description: string | null, readonly og_image: string | null, readonly og_title: string | null, readonly twitter_description: string | null, readonly twitter_image: string | null, readonly twitter_title: string | null, readonly plaintext: string | null, readonly html: string | null, readonly url: string, readonly canonical_url: string | null, readonly uuid: string, readonly page: boolean | null, readonly codeinjection_foot: string | null, readonly codeinjection_head: string | null, readonly codeinjection_styles: string | null, readonly comment_id: string | null, readonly reading_time: number | null, readonly created_at_pretty: string, readonly published_at_pretty: string | null, readonly published_at_month: string | null, readonly published_at_archive: string | null, readonly updated_at_pretty: string | null, readonly authors: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly website: string | null, readonly id: string, readonly url: string } | null>, readonly primary_author: { readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly url: string, readonly website: string | null }, readonly primary_tag: { readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null, readonly tags: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null> | null, readonly internal: { readonly type: string }, readonly childHtmlRehype: { readonly html: string | null, readonly tableOfContents: Record<string, unknown> | null } | null } }> } };

type GhostLanguageFieldsFragment = { readonly content: { readonly Back: string | null, readonly Newer_Posts: string | null, readonly of: string | null, readonly Older_Posts: string | null, readonly Page: string | null, readonly Subscribe: string | null, readonly Subscribe_to: string | null, readonly Subscribed_: string | null, readonly with_the_email_address: string | null, readonly Your_email_address: string | null, readonly You_ve_successfully_subscribed: string | null, readonly A_collection_of_posts: string | null, readonly A_collection_of_1_post: string | null, readonly A_collection_of___posts: string | null, readonly Get_the_latest_posts_delivered_right_to_your_inbox: string | null, readonly Latest_Posts: string | null, readonly No_posts: string | null, readonly Read_More: string | null, readonly Read__a_href___url___more_posts__a__by_this_author: string | null, readonly See_all___posts: string | null, readonly Share_this: string | null, readonly Stay_up_to_date__Get_all_the_latest___greatest_posts_delivered_straight_to_your_inbox: string | null, readonly youremail_example_com: string | null, readonly _1_post: string | null, readonly _xposts: string | null, readonly Search: string | null, readonly _x1xminxread: string | null, readonly _1_min_read: string | null, readonly _xminxread: string | null, readonly shares: string | null, readonly Comments: string | null, readonly Next_article: string | null, readonly Prev_article: string | null, readonly in: string | null, readonly Latest_Articles: string | null, readonly Tag_Cloud: string | null, readonly Follow: string | null, readonly Sign_up_for_my_newsletter_: string | null, readonly Related_Articles: string | null, readonly Unfortunately__this_page_doesn_t_exist: string | null, readonly Want_more_stuff_like_this_: string | null, readonly Get_the_best_viral_stories_straight_into_your_inbox_: string | null, readonly Listen: string | null, readonly Home: string | null, readonly More: string | null, readonly By: string | null, readonly Updated: string | null, readonly Posts_Tagged: string | null, readonly Total_number_of_posts: string | null, readonly The_full_archive: string | null, readonly Get_Started: string | null, readonly Log_in: string | null, readonly Upgrade: string | null, readonly Account: string | null, readonly Log_out: string | null, readonly Sign_in: string | null, readonly Sign_up: string | null, readonly Subscribe_now: string | null, readonly Signed_in_as: string | null, readonly This_post_is_for_paying_subscribers_only: string | null, readonly Read_the_rest_of_this_story_with_a_free_account_: string | null, readonly Hey_there_: string | null, readonly You_don_t_have_access_to_this_post_on__strong__siteTitle___strong__at_the_moment__but_if_you_upgrade_your_account_you_ll_be_able_to_see_the_whole_thing__as_well_as_all_the_other_posts_in_the_archive__Subscribing_only_takes_a_few_seconds_and_will_give_you_immediate_access_: string | null, readonly Already_have_an_account_: string | null, readonly You_ve_successfully_subscribed_to: string | null, readonly Great__Next__complete_checkout_for_full_access_to: string | null, readonly Welcome_back__You_ve_successfully_signed_in_: string | null, readonly Unable_to_sign_you_in__Please_try_again_: string | null, readonly Success__Your_account_is_fully_activated__you_now_have_access_to_all_content_: string | null, readonly Success__Your_billing_info_is_updated_: string | null, readonly Billing_info_update_failed_: string | null, readonly Read_more: string | null, readonly Previous_article: string | null, readonly Featured_Articles: string | null, readonly Go_to_the_profile_of: string | null, readonly Hi_I_m: string | null, readonly Go_to: string | null, readonly Stories: string | null, readonly Navigate_up_down: string | null, readonly Go_to_article: string | null, readonly Search_new_term: string | null, readonly Close_search: string | null, readonly No_results_found: string | null, readonly featured_story: string | null, readonly Read_post: string | null, readonly About_Us: string | null, readonly Share: string | null, readonly Share_on: string | null, readonly Send: string | null, readonly Related__span_class__text_primary__Articles__span_: string | null, readonly Please_enter_a_valid_email_address_: string | null, readonly _strong_Great___strong__Check_your_inbox_and_click_the_link_to_confirm_your_subscription: string | null, readonly GO_TOP: string | null, readonly Share_this_article: string | null, readonly Related__span_class__text_success__Articles__span_: string | null, readonly W_tej_chwili_nie_masz_dost_pu_do_tego_wpisu_na__strong__siteTitle___strong___ale_je_li_podniesiesz_wersj__swojego_konta_to_b_dziesz_m_g__zobaczy__jego_ca_o____jak_r_wnie__wszystkie_inne_posty_w_tym_archiwum__Subskrypcja_zajmuje_tylko_kilka_sekund_i_od_razu_masz_dost_p_: string | null, readonly _2_posts: string | null, readonly _1_Story: string | null, readonly _xStories: string | null, readonly No_Stories: string | null, readonly Tags: string | null, readonly Related_Posts: string | null, readonly Continue: string | null, readonly Name: string | null, readonly Email_Address: string | null, readonly Message: string | null, readonly PHONE: string | null, readonly ADDRESS: string | null, readonly EMAIL: string | null, readonly All: string | null, readonly View_Project: string | null, readonly Discover_more_of_what_matters_to_you: string | null } | null };

type GhostPageFieldsFragment = { readonly title: string, readonly slug: string, readonly featured: boolean, readonly feature_image: string | null, readonly excerpt: string | null, readonly custom_excerpt: string | null, readonly visibility: string, readonly created_at: string, readonly published_at: string | null, readonly updated_at: string | null, readonly meta_title: string | null, readonly meta_description: string | null, readonly og_description: string | null, readonly og_image: string | null, readonly og_title: string | null, readonly twitter_description: string | null, readonly twitter_image: string | null, readonly twitter_title: string | null, readonly plaintext: string | null, readonly html: string | null, readonly url: string, readonly canonical_url: string | null, readonly uuid: string, readonly page: boolean | null, readonly codeinjection_foot: string | null, readonly codeinjection_head: string | null, readonly codeinjection_styles: string | null, readonly comment_id: string | null, readonly reading_time: number | null, readonly created_at_pretty: string, readonly published_at_pretty: string | null, readonly updated_at_pretty: string | null, readonly authors: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly website: string | null } | null>, readonly primary_author: { readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly website: string | null }, readonly primary_tag: { readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string } | null, readonly tags: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string } | null> | null };

type GhostPostArchiveQueryQueryVariables = Exact<{
  limit: Scalars['Int'];
  skip: Scalars['Int'];
}>;


type GhostPostArchiveQueryQuery = { readonly allGhostPost: { readonly totalCount: number, readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly title: string, readonly slug: string, readonly featured: boolean, readonly feature_image: string | null, readonly excerpt: string | null, readonly custom_excerpt: string | null, readonly visibility: string, readonly created_at: string, readonly published_at: string | null, readonly updated_at: string | null, readonly meta_title: string | null, readonly meta_description: string | null, readonly og_description: string | null, readonly og_image: string | null, readonly og_title: string | null, readonly twitter_description: string | null, readonly twitter_image: string | null, readonly twitter_title: string | null, readonly plaintext: string | null, readonly html: string | null, readonly url: string, readonly canonical_url: string | null, readonly uuid: string, readonly page: boolean | null, readonly codeinjection_foot: string | null, readonly codeinjection_head: string | null, readonly codeinjection_styles: string | null, readonly comment_id: string | null, readonly reading_time: number | null, readonly created_at_pretty: string, readonly published_at_pretty: string | null, readonly published_at_month: string | null, readonly published_at_archive: string | null, readonly updated_at_pretty: string | null, readonly localFeatureImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly authors: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly website: string | null, readonly id: string, readonly url: string, readonly localProfileImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null>, readonly primary_author: { readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly url: string, readonly website: string | null }, readonly primary_tag: { readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null, readonly tags: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null> | null, readonly internal: { readonly type: string }, readonly childHtmlRehype: { readonly html: string | null, readonly tableOfContents: Record<string, unknown> | null } | null } }> } };

type GhostPostFeaturedQueryQueryVariables = Exact<{
  limit: Scalars['Int'];
  skip: Scalars['Int'];
}>;


type GhostPostFeaturedQueryQuery = { readonly allGhostPost: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly title: string, readonly slug: string, readonly featured: boolean, readonly feature_image: string | null, readonly excerpt: string | null, readonly custom_excerpt: string | null, readonly visibility: string, readonly created_at: string, readonly published_at: string | null, readonly updated_at: string | null, readonly meta_title: string | null, readonly meta_description: string | null, readonly og_description: string | null, readonly og_image: string | null, readonly og_title: string | null, readonly twitter_description: string | null, readonly twitter_image: string | null, readonly twitter_title: string | null, readonly plaintext: string | null, readonly html: string | null, readonly url: string, readonly canonical_url: string | null, readonly uuid: string, readonly page: boolean | null, readonly codeinjection_foot: string | null, readonly codeinjection_head: string | null, readonly codeinjection_styles: string | null, readonly comment_id: string | null, readonly reading_time: number | null, readonly created_at_pretty: string, readonly published_at_pretty: string | null, readonly published_at_month: string | null, readonly published_at_archive: string | null, readonly updated_at_pretty: string | null, readonly localFeatureImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly authors: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly website: string | null, readonly id: string, readonly url: string, readonly localProfileImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null>, readonly primary_author: { readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly url: string, readonly website: string | null }, readonly primary_tag: { readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null, readonly tags: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null> | null, readonly internal: { readonly type: string }, readonly childHtmlRehype: { readonly html: string | null, readonly tableOfContents: Record<string, unknown> | null } | null } }> } };

type GhostPostFeaturedSliderQueryQueryVariables = Exact<{
  limit: Scalars['Int'];
  skip: Scalars['Int'];
}>;


type GhostPostFeaturedSliderQueryQuery = { readonly allPosts: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly title: string, readonly slug: string, readonly featured: boolean, readonly feature_image: string | null, readonly excerpt: string | null, readonly custom_excerpt: string | null, readonly visibility: string, readonly created_at: string, readonly published_at: string | null, readonly updated_at: string | null, readonly meta_title: string | null, readonly meta_description: string | null, readonly og_description: string | null, readonly og_image: string | null, readonly og_title: string | null, readonly twitter_description: string | null, readonly twitter_image: string | null, readonly twitter_title: string | null, readonly plaintext: string | null, readonly html: string | null, readonly url: string, readonly canonical_url: string | null, readonly uuid: string, readonly page: boolean | null, readonly codeinjection_foot: string | null, readonly codeinjection_head: string | null, readonly codeinjection_styles: string | null, readonly comment_id: string | null, readonly reading_time: number | null, readonly created_at_pretty: string, readonly published_at_pretty: string | null, readonly published_at_month: string | null, readonly published_at_archive: string | null, readonly updated_at_pretty: string | null, readonly localFeatureImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly authors: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly website: string | null, readonly id: string, readonly url: string, readonly localProfileImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null>, readonly primary_author: { readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly url: string, readonly website: string | null }, readonly primary_tag: { readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null, readonly tags: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null> | null, readonly internal: { readonly type: string }, readonly childHtmlRehype: { readonly html: string | null, readonly tableOfContents: Record<string, unknown> | null } | null } }> }, readonly featuredPosts: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly title: string, readonly slug: string, readonly featured: boolean, readonly feature_image: string | null, readonly excerpt: string | null, readonly custom_excerpt: string | null, readonly visibility: string, readonly created_at: string, readonly published_at: string | null, readonly updated_at: string | null, readonly meta_title: string | null, readonly meta_description: string | null, readonly og_description: string | null, readonly og_image: string | null, readonly og_title: string | null, readonly twitter_description: string | null, readonly twitter_image: string | null, readonly twitter_title: string | null, readonly plaintext: string | null, readonly html: string | null, readonly url: string, readonly canonical_url: string | null, readonly uuid: string, readonly page: boolean | null, readonly codeinjection_foot: string | null, readonly codeinjection_head: string | null, readonly codeinjection_styles: string | null, readonly comment_id: string | null, readonly reading_time: number | null, readonly created_at_pretty: string, readonly published_at_pretty: string | null, readonly published_at_month: string | null, readonly published_at_archive: string | null, readonly updated_at_pretty: string | null, readonly localFeatureImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly authors: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly website: string | null, readonly id: string, readonly url: string } | null>, readonly primary_author: { readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly url: string, readonly website: string | null }, readonly primary_tag: { readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null, readonly tags: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null> | null, readonly internal: { readonly type: string }, readonly childHtmlRehype: { readonly html: string | null, readonly tableOfContents: Record<string, unknown> | null } | null } }> } };

type GhostPostFieldsFragment = { readonly id: string, readonly title: string, readonly slug: string, readonly featured: boolean, readonly feature_image: string | null, readonly excerpt: string | null, readonly custom_excerpt: string | null, readonly visibility: string, readonly created_at: string, readonly published_at: string | null, readonly updated_at: string | null, readonly meta_title: string | null, readonly meta_description: string | null, readonly og_description: string | null, readonly og_image: string | null, readonly og_title: string | null, readonly twitter_description: string | null, readonly twitter_image: string | null, readonly twitter_title: string | null, readonly plaintext: string | null, readonly html: string | null, readonly url: string, readonly canonical_url: string | null, readonly uuid: string, readonly page: boolean | null, readonly codeinjection_foot: string | null, readonly codeinjection_head: string | null, readonly codeinjection_styles: string | null, readonly comment_id: string | null, readonly reading_time: number | null, readonly created_at_pretty: string, readonly published_at_pretty: string | null, readonly published_at_month: string | null, readonly published_at_archive: string | null, readonly updated_at_pretty: string | null, readonly authors: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly website: string | null, readonly id: string, readonly url: string } | null>, readonly primary_author: { readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly url: string, readonly website: string | null }, readonly primary_tag: { readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null, readonly tags: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null> | null, readonly internal: { readonly type: string }, readonly childHtmlRehype: { readonly html: string | null, readonly tableOfContents: Record<string, unknown> | null } | null };

type GhostPostGridQueryQueryVariables = Exact<{
  limit: Scalars['Int'];
  skip: Scalars['Int'];
}>;


type GhostPostGridQueryQuery = { readonly allGhostPost: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly title: string, readonly slug: string, readonly featured: boolean, readonly feature_image: string | null, readonly excerpt: string | null, readonly custom_excerpt: string | null, readonly visibility: string, readonly created_at: string, readonly published_at: string | null, readonly updated_at: string | null, readonly meta_title: string | null, readonly meta_description: string | null, readonly og_description: string | null, readonly og_image: string | null, readonly og_title: string | null, readonly twitter_description: string | null, readonly twitter_image: string | null, readonly twitter_title: string | null, readonly plaintext: string | null, readonly html: string | null, readonly url: string, readonly canonical_url: string | null, readonly uuid: string, readonly page: boolean | null, readonly codeinjection_foot: string | null, readonly codeinjection_head: string | null, readonly codeinjection_styles: string | null, readonly comment_id: string | null, readonly reading_time: number | null, readonly created_at_pretty: string, readonly published_at_pretty: string | null, readonly published_at_month: string | null, readonly published_at_archive: string | null, readonly updated_at_pretty: string | null, readonly localFeatureImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly authors: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly website: string | null, readonly id: string, readonly url: string, readonly localProfileImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null>, readonly primary_author: { readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly url: string, readonly website: string | null }, readonly primary_tag: { readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null, readonly tags: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null> | null, readonly internal: { readonly type: string }, readonly childHtmlRehype: { readonly html: string | null, readonly tableOfContents: Record<string, unknown> | null } | null } }> }, readonly ghostPost: { readonly title: string, readonly custom_excerpt: string | null, readonly excerpt: string | null, readonly feature_image: string | null, readonly url: string, readonly created_at: string, readonly published_at: string | null, readonly updated_at: string | null, readonly reading_time: number | null, readonly created_at_pretty: string, readonly published_at_pretty: string | null, readonly updated_at_pretty: string | null, readonly localFeatureImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null };

type GhostPostMediumQueryQueryVariables = Exact<{
  limit: Scalars['Int'];
  skip: Scalars['Int'];
}>;


type GhostPostMediumQueryQuery = { readonly allGhostPost: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly title: string, readonly slug: string, readonly featured: boolean, readonly feature_image: string | null, readonly excerpt: string | null, readonly custom_excerpt: string | null, readonly visibility: string, readonly created_at: string, readonly published_at: string | null, readonly updated_at: string | null, readonly meta_title: string | null, readonly meta_description: string | null, readonly og_description: string | null, readonly og_image: string | null, readonly og_title: string | null, readonly twitter_description: string | null, readonly twitter_image: string | null, readonly twitter_title: string | null, readonly plaintext: string | null, readonly html: string | null, readonly url: string, readonly canonical_url: string | null, readonly uuid: string, readonly page: boolean | null, readonly codeinjection_foot: string | null, readonly codeinjection_head: string | null, readonly codeinjection_styles: string | null, readonly comment_id: string | null, readonly reading_time: number | null, readonly created_at_pretty: string, readonly published_at_pretty: string | null, readonly published_at_month: string | null, readonly published_at_archive: string | null, readonly updated_at_pretty: string | null, readonly localFeatureImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly authors: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly website: string | null, readonly id: string, readonly url: string, readonly localProfileImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null>, readonly primary_author: { readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly url: string, readonly website: string | null }, readonly primary_tag: { readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null, readonly tags: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null> | null, readonly internal: { readonly type: string }, readonly childHtmlRehype: { readonly html: string | null, readonly tableOfContents: Record<string, unknown> | null } | null } }> } };

type GhostPostMediumSidebarQueryQueryVariables = Exact<{
  limit: Scalars['Int'];
  skip: Scalars['Int'];
}>;


type GhostPostMediumSidebarQueryQuery = { readonly allGhostPost: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly title: string, readonly slug: string, readonly featured: boolean, readonly feature_image: string | null, readonly excerpt: string | null, readonly custom_excerpt: string | null, readonly visibility: string, readonly created_at: string, readonly published_at: string | null, readonly updated_at: string | null, readonly meta_title: string | null, readonly meta_description: string | null, readonly og_description: string | null, readonly og_image: string | null, readonly og_title: string | null, readonly twitter_description: string | null, readonly twitter_image: string | null, readonly twitter_title: string | null, readonly plaintext: string | null, readonly html: string | null, readonly url: string, readonly canonical_url: string | null, readonly uuid: string, readonly page: boolean | null, readonly codeinjection_foot: string | null, readonly codeinjection_head: string | null, readonly codeinjection_styles: string | null, readonly comment_id: string | null, readonly reading_time: number | null, readonly created_at_pretty: string, readonly published_at_pretty: string | null, readonly published_at_month: string | null, readonly published_at_archive: string | null, readonly updated_at_pretty: string | null, readonly localFeatureImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly authors: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly website: string | null, readonly id: string, readonly url: string, readonly localProfileImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null>, readonly primary_author: { readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly url: string, readonly website: string | null }, readonly primary_tag: { readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null, readonly tags: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null> | null, readonly internal: { readonly type: string }, readonly childHtmlRehype: { readonly html: string | null, readonly tableOfContents: Record<string, unknown> | null } | null } }> }, readonly allGhostTag: { readonly edges: ReadonlyArray<{ readonly node: { readonly name: string, readonly slug: string, readonly url: string, readonly canonical_url: string | null, readonly accent_color: string | null, readonly id: string, readonly postCount: number | null } }> }, readonly ghostPost: { readonly title: string, readonly custom_excerpt: string | null, readonly excerpt: string | null, readonly feature_image: string | null, readonly url: string, readonly localFeatureImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null };

type GhostPostPersonalQueryQueryVariables = Exact<{ [key: string]: never; }>;


type GhostPostPersonalQueryQuery = { readonly ghostPage: { readonly title: string, readonly slug: string, readonly featured: boolean, readonly feature_image: string | null, readonly excerpt: string | null, readonly custom_excerpt: string | null, readonly visibility: string, readonly created_at: string, readonly published_at: string | null, readonly updated_at: string | null, readonly meta_title: string | null, readonly meta_description: string | null, readonly og_description: string | null, readonly og_image: string | null, readonly og_title: string | null, readonly twitter_description: string | null, readonly twitter_image: string | null, readonly twitter_title: string | null, readonly plaintext: string | null, readonly html: string | null, readonly url: string, readonly canonical_url: string | null, readonly uuid: string, readonly page: boolean | null, readonly codeinjection_foot: string | null, readonly codeinjection_head: string | null, readonly codeinjection_styles: string | null, readonly comment_id: string | null, readonly reading_time: number | null, readonly created_at_pretty: string, readonly published_at_pretty: string | null, readonly updated_at_pretty: string | null, readonly localFeatureImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly authors: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly website: string | null, readonly localProfileImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null>, readonly primary_author: { readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly website: string | null }, readonly primary_tag: { readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string } | null, readonly tags: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string } | null> | null } | null };

type GhostPostPhotographerQueryQueryVariables = Exact<{
  limit: Scalars['Int'];
  skip: Scalars['Int'];
}>;


type GhostPostPhotographerQueryQuery = { readonly allPosts: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly title: string, readonly slug: string, readonly featured: boolean, readonly feature_image: string | null, readonly excerpt: string | null, readonly custom_excerpt: string | null, readonly visibility: string, readonly created_at: string, readonly published_at: string | null, readonly updated_at: string | null, readonly meta_title: string | null, readonly meta_description: string | null, readonly og_description: string | null, readonly og_image: string | null, readonly og_title: string | null, readonly twitter_description: string | null, readonly twitter_image: string | null, readonly twitter_title: string | null, readonly plaintext: string | null, readonly html: string | null, readonly url: string, readonly canonical_url: string | null, readonly uuid: string, readonly page: boolean | null, readonly codeinjection_foot: string | null, readonly codeinjection_head: string | null, readonly codeinjection_styles: string | null, readonly comment_id: string | null, readonly reading_time: number | null, readonly created_at_pretty: string, readonly published_at_pretty: string | null, readonly published_at_month: string | null, readonly published_at_archive: string | null, readonly updated_at_pretty: string | null, readonly localFeatureImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly authors: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly website: string | null, readonly id: string, readonly url: string, readonly localProfileImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null>, readonly primary_author: { readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly url: string, readonly website: string | null }, readonly primary_tag: { readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null, readonly tags: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null> | null, readonly internal: { readonly type: string }, readonly childHtmlRehype: { readonly html: string | null, readonly tableOfContents: Record<string, unknown> | null } | null } }> }, readonly featuredPosts: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly title: string, readonly slug: string, readonly featured: boolean, readonly feature_image: string | null, readonly excerpt: string | null, readonly custom_excerpt: string | null, readonly visibility: string, readonly created_at: string, readonly published_at: string | null, readonly updated_at: string | null, readonly meta_title: string | null, readonly meta_description: string | null, readonly og_description: string | null, readonly og_image: string | null, readonly og_title: string | null, readonly twitter_description: string | null, readonly twitter_image: string | null, readonly twitter_title: string | null, readonly plaintext: string | null, readonly html: string | null, readonly url: string, readonly canonical_url: string | null, readonly uuid: string, readonly page: boolean | null, readonly codeinjection_foot: string | null, readonly codeinjection_head: string | null, readonly codeinjection_styles: string | null, readonly comment_id: string | null, readonly reading_time: number | null, readonly created_at_pretty: string, readonly published_at_pretty: string | null, readonly published_at_month: string | null, readonly published_at_archive: string | null, readonly updated_at_pretty: string | null, readonly localFeatureImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly authors: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly website: string | null, readonly id: string, readonly url: string, readonly localProfileImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null>, readonly primary_author: { readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly url: string, readonly website: string | null }, readonly primary_tag: { readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null, readonly tags: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null> | null, readonly internal: { readonly type: string }, readonly childHtmlRehype: { readonly html: string | null, readonly tableOfContents: Record<string, unknown> | null } | null } }> } };

type GhostPostQueryQueryVariables = Exact<{
  limit: Scalars['Int'];
  skip: Scalars['Int'];
}>;


type GhostPostQueryQuery = { readonly allGhostPost: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly title: string, readonly slug: string, readonly featured: boolean, readonly feature_image: string | null, readonly excerpt: string | null, readonly custom_excerpt: string | null, readonly visibility: string, readonly created_at: string, readonly published_at: string | null, readonly updated_at: string | null, readonly meta_title: string | null, readonly meta_description: string | null, readonly og_description: string | null, readonly og_image: string | null, readonly og_title: string | null, readonly twitter_description: string | null, readonly twitter_image: string | null, readonly twitter_title: string | null, readonly plaintext: string | null, readonly html: string | null, readonly url: string, readonly canonical_url: string | null, readonly uuid: string, readonly page: boolean | null, readonly codeinjection_foot: string | null, readonly codeinjection_head: string | null, readonly codeinjection_styles: string | null, readonly comment_id: string | null, readonly reading_time: number | null, readonly created_at_pretty: string, readonly published_at_pretty: string | null, readonly published_at_month: string | null, readonly published_at_archive: string | null, readonly updated_at_pretty: string | null, readonly localFeatureImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly authors: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly website: string | null, readonly id: string, readonly url: string, readonly localProfileImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null>, readonly primary_author: { readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly url: string, readonly website: string | null }, readonly primary_tag: { readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null, readonly tags: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null> | null, readonly internal: { readonly type: string }, readonly childHtmlRehype: { readonly html: string | null, readonly tableOfContents: Record<string, unknown> | null } | null } }> } };

type GhostPostSidebarQueryQueryVariables = Exact<{
  limit: Scalars['Int'];
  skip: Scalars['Int'];
}>;


type GhostPostSidebarQueryQuery = { readonly allGhostPost: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly title: string, readonly slug: string, readonly featured: boolean, readonly feature_image: string | null, readonly excerpt: string | null, readonly custom_excerpt: string | null, readonly visibility: string, readonly created_at: string, readonly published_at: string | null, readonly updated_at: string | null, readonly meta_title: string | null, readonly meta_description: string | null, readonly og_description: string | null, readonly og_image: string | null, readonly og_title: string | null, readonly twitter_description: string | null, readonly twitter_image: string | null, readonly twitter_title: string | null, readonly plaintext: string | null, readonly html: string | null, readonly url: string, readonly canonical_url: string | null, readonly uuid: string, readonly page: boolean | null, readonly codeinjection_foot: string | null, readonly codeinjection_head: string | null, readonly codeinjection_styles: string | null, readonly comment_id: string | null, readonly reading_time: number | null, readonly created_at_pretty: string, readonly published_at_pretty: string | null, readonly published_at_month: string | null, readonly published_at_archive: string | null, readonly updated_at_pretty: string | null, readonly localFeatureImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly authors: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly website: string | null, readonly id: string, readonly url: string, readonly localProfileImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null>, readonly primary_author: { readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly url: string, readonly website: string | null }, readonly primary_tag: { readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null, readonly tags: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null> | null, readonly internal: { readonly type: string }, readonly childHtmlRehype: { readonly html: string | null, readonly tableOfContents: Record<string, unknown> | null } | null } }> } };

type GhostSettingsQueryVariables = Exact<{ [key: string]: never; }>;


type GhostSettingsQuery = { readonly allGhostSettings: { readonly edges: ReadonlyArray<{ readonly node: { readonly accent_color: string | null, readonly title: string | null, readonly description: string | null, readonly logo: string | null, readonly icon: string | null, readonly url: string, readonly cover_image: string | null, readonly facebook: string | null, readonly twitter: string | null, readonly lang: string, readonly timezone: string, readonly codeinjection_head: string | null, readonly codeinjection_foot: string | null, readonly codeinjection_styles: string, readonly localLogo: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly localIcon: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly navigation: ReadonlyArray<{ readonly label: string, readonly url: string } | null> | null, readonly secondary_navigation: ReadonlyArray<{ readonly label: string, readonly url: string } | null> | null } }> }, readonly file: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null };

type GhostSettingsArticleMetaQueryVariables = Exact<{ [key: string]: never; }>;


type GhostSettingsArticleMetaQuery = { readonly allGhostSettings: { readonly edges: ReadonlyArray<{ readonly node: { readonly accent_color: string | null, readonly title: string | null, readonly description: string | null, readonly logo: string | null, readonly icon: string | null, readonly url: string, readonly cover_image: string | null, readonly facebook: string | null, readonly twitter: string | null, readonly lang: string, readonly timezone: string, readonly codeinjection_head: string | null, readonly codeinjection_foot: string | null, readonly codeinjection_styles: string, readonly navigation: ReadonlyArray<{ readonly label: string, readonly url: string } | null> | null, readonly secondary_navigation: ReadonlyArray<{ readonly label: string, readonly url: string } | null> | null } }> } };

type GhostSettingsAuthorMetaQueryVariables = Exact<{ [key: string]: never; }>;


type GhostSettingsAuthorMetaQuery = { readonly allGhostSettings: { readonly edges: ReadonlyArray<{ readonly node: { readonly accent_color: string | null, readonly title: string | null, readonly description: string | null, readonly logo: string | null, readonly icon: string | null, readonly url: string, readonly cover_image: string | null, readonly facebook: string | null, readonly twitter: string | null, readonly lang: string, readonly timezone: string, readonly codeinjection_head: string | null, readonly codeinjection_foot: string | null, readonly codeinjection_styles: string, readonly navigation: ReadonlyArray<{ readonly label: string, readonly url: string } | null> | null, readonly secondary_navigation: ReadonlyArray<{ readonly label: string, readonly url: string } | null> | null } }> } };

type GhostSettingsFieldsFragment = { readonly accent_color: string | null, readonly title: string | null, readonly description: string | null, readonly logo: string | null, readonly icon: string | null, readonly url: string, readonly cover_image: string | null, readonly facebook: string | null, readonly twitter: string | null, readonly lang: string, readonly timezone: string, readonly codeinjection_head: string | null, readonly codeinjection_foot: string | null, readonly codeinjection_styles: string, readonly navigation: ReadonlyArray<{ readonly label: string, readonly url: string } | null> | null, readonly secondary_navigation: ReadonlyArray<{ readonly label: string, readonly url: string } | null> | null };

type GhostSettingsMetaDataQueryVariables = Exact<{ [key: string]: never; }>;


type GhostSettingsMetaDataQuery = { readonly allGhostSettings: { readonly edges: ReadonlyArray<{ readonly node: { readonly title: string | null, readonly description: string | null } }> } };

type GhostSettingsWebsiteMetaQueryVariables = Exact<{ [key: string]: never; }>;


type GhostSettingsWebsiteMetaQuery = { readonly allGhostSettings: { readonly edges: ReadonlyArray<{ readonly node: { readonly accent_color: string | null, readonly title: string | null, readonly description: string | null, readonly logo: string | null, readonly icon: string | null, readonly url: string, readonly cover_image: string | null, readonly facebook: string | null, readonly twitter: string | null, readonly lang: string, readonly timezone: string, readonly codeinjection_head: string | null, readonly codeinjection_foot: string | null, readonly codeinjection_styles: string, readonly navigation: ReadonlyArray<{ readonly label: string, readonly url: string } | null> | null, readonly secondary_navigation: ReadonlyArray<{ readonly label: string, readonly url: string } | null> | null } }> } };

type GhostSidebarLatestPostsQueryQueryVariables = Exact<{ [key: string]: never; }>;


type GhostSidebarLatestPostsQueryQuery = { readonly allGhostPost: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly title: string, readonly slug: string, readonly featured: boolean, readonly feature_image: string | null, readonly excerpt: string | null, readonly custom_excerpt: string | null, readonly visibility: string, readonly created_at: string, readonly published_at: string | null, readonly updated_at: string | null, readonly meta_title: string | null, readonly meta_description: string | null, readonly og_description: string | null, readonly og_image: string | null, readonly og_title: string | null, readonly twitter_description: string | null, readonly twitter_image: string | null, readonly twitter_title: string | null, readonly plaintext: string | null, readonly html: string | null, readonly url: string, readonly canonical_url: string | null, readonly uuid: string, readonly page: boolean | null, readonly codeinjection_foot: string | null, readonly codeinjection_head: string | null, readonly codeinjection_styles: string | null, readonly comment_id: string | null, readonly reading_time: number | null, readonly created_at_pretty: string, readonly published_at_pretty: string | null, readonly published_at_month: string | null, readonly published_at_archive: string | null, readonly updated_at_pretty: string | null, readonly authors: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly website: string | null, readonly id: string, readonly url: string } | null>, readonly primary_author: { readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly url: string, readonly website: string | null }, readonly primary_tag: { readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null, readonly tags: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null> | null, readonly internal: { readonly type: string }, readonly childHtmlRehype: { readonly html: string | null, readonly tableOfContents: Record<string, unknown> | null } | null } }> } };

type GhostTagCloudFieldsFragment = { readonly name: string, readonly slug: string, readonly url: string, readonly canonical_url: string | null, readonly accent_color: string | null, readonly id: string, readonly postCount: number | null };

type GhostTagFieldsFragment = { readonly slug: string, readonly name: string, readonly visibility: string, readonly feature_image: string | null, readonly description: string | null, readonly meta_title: string | null, readonly meta_description: string | null, readonly url: string };

type GhostTagQueryQueryVariables = Exact<{
  slug: Scalars['String'];
  limit: Scalars['Int'];
  skip: Scalars['Int'];
}>;


type GhostTagQueryQuery = { readonly ghostTag: { readonly slug: string, readonly name: string, readonly visibility: string, readonly feature_image: string | null, readonly description: string | null, readonly meta_title: string | null, readonly meta_description: string | null, readonly url: string } | null, readonly allGhostPost: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly title: string, readonly slug: string, readonly featured: boolean, readonly feature_image: string | null, readonly excerpt: string | null, readonly custom_excerpt: string | null, readonly visibility: string, readonly created_at: string, readonly published_at: string | null, readonly updated_at: string | null, readonly meta_title: string | null, readonly meta_description: string | null, readonly og_description: string | null, readonly og_image: string | null, readonly og_title: string | null, readonly twitter_description: string | null, readonly twitter_image: string | null, readonly twitter_title: string | null, readonly plaintext: string | null, readonly html: string | null, readonly url: string, readonly canonical_url: string | null, readonly uuid: string, readonly page: boolean | null, readonly codeinjection_foot: string | null, readonly codeinjection_head: string | null, readonly codeinjection_styles: string | null, readonly comment_id: string | null, readonly reading_time: number | null, readonly created_at_pretty: string, readonly published_at_pretty: string | null, readonly published_at_month: string | null, readonly published_at_archive: string | null, readonly updated_at_pretty: string | null, readonly localFeatureImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly authors: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly website: string | null, readonly id: string, readonly url: string, readonly localProfileImage: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null>, readonly primary_author: { readonly name: string, readonly slug: string, readonly bio: string | null, readonly profile_image: string | null, readonly twitter: string | null, readonly facebook: string | null, readonly url: string, readonly website: string | null }, readonly primary_tag: { readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null, readonly tags: ReadonlyArray<{ readonly name: string, readonly slug: string, readonly description: string | null, readonly feature_image: string | null, readonly meta_description: string | null, readonly meta_title: string | null, readonly visibility: string, readonly accent_color: string | null, readonly url: string, readonly id: string } | null> | null, readonly internal: { readonly type: string }, readonly childHtmlRehype: { readonly html: string | null, readonly tableOfContents: Record<string, unknown> | null } | null } }> } };

type GhostTagsQueryQueryVariables = Exact<{ [key: string]: never; }>;


type GhostTagsQueryQuery = { readonly allGhostTag: { readonly edges: ReadonlyArray<{ readonly node: { readonly name: string, readonly slug: string, readonly url: string, readonly canonical_url: string | null, readonly accent_color: string | null, readonly id: string, readonly postCount: number | null } }> } };

type GhostTagsSidebarQueryQueryVariables = Exact<{ [key: string]: never; }>;


type GhostTagsSidebarQueryQuery = { readonly allGhostTag: { readonly edges: ReadonlyArray<{ readonly node: { readonly name: string, readonly slug: string, readonly url: string, readonly canonical_url: string | null, readonly accent_color: string | null, readonly id: string, readonly postCount: number | null } }> } };


}
